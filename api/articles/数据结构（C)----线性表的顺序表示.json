{"title":"数据结构（C)--线性表","uid":"1c864ee8c45d128c1db0522699c2fec9","slug":"数据结构（C)----线性表的顺序表示","date":"2022-11-09T03:55:20.000Z","updated":"2022-11-09T06:21:12.111Z","comments":true,"path":"api/articles/数据结构（C)----线性表的顺序表示.json","keywords":null,"cover":"https://zuimiao.xyz/images/cover2.jpg","content":"<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><p><img src=\"https://zuimiao.xyz/images/1.png\" alt=\"1\"></p>\n<h2 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h2><p><strong>线性表（List）：零个或多个数据元素的有限序列。</strong></p>\n<p>线性表的数据集合为{a1,a2,…,an}，假设每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</p>\n<hr>\n<h2 id=\"一、顺序表的顺序存储结构\"><a href=\"#一、顺序表的顺序存储结构\" class=\"headerlink\" title=\"一、顺序表的顺序存储结构\"></a>一、顺序表的顺序存储结构</h2><h3 id=\"1、顺序表的基本概念\"><a href=\"#1、顺序表的基本概念\" class=\"headerlink\" title=\"1、顺序表的基本概念\"></a>1、顺序表的基本概念</h3><p>概念：用一组<strong>地址连续</strong>的存储单元依次存储线性表的数据元素，这种存储结构的线性表称为顺序表。</p>\n<p><strong>特点：逻辑上相邻的数据元素，物理次序也是相邻的。</strong></p>\n<h3 id=\"2、顺序表存储结构\"><a href=\"#2、顺序表存储结构\" class=\"headerlink\" title=\"2、顺序表存储结构\"></a>2、顺序表存储结构</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MaxSize</span> <span class=\"token expression\"><span class=\"token number\">50</span>\t</span><span class=\"token comment\">//线性表存储空间的初始分配量</span></span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表中的元素的类型</span>\n<span class=\"token comment\">//静态分配</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tElemType data<span class=\"token punctuation\">[</span>MaxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义的数组，用来存元素</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span><span class=\"token comment\">//当前顺序表中有多少个元素</span>\n<span class=\"token punctuation\">&#125;</span>SqList<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"3、顺序表的插入\"><a href=\"#3、顺序表的插入\" class=\"headerlink\" title=\"3、顺序表的插入\"></a>3、顺序表的插入</h3><p><img src=\"https://zuimiao.xyz/images/2.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*\n插入操作\n初始条件：顺序表L已存在\n操作结果：从1开始，在L中的第i个位置之前插入新的数据元素e，L的长度加1\nbool用来返回插入是否成功的结果\n&amp;为C++语法 为引用变量\n*/</span>\nbool <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> i<span class=\"token operator\">></span>L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断要插入的位置是否合法</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> MaxSize<span class=\"token punctuation\">)</span><span class=\"token comment\">//元素存满了，超出了空间</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//移动顺序表中的元素，依次往后移动</span>\n\t\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">//数组下标从零开始，插入第一个位置，访问的下标为0</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、顺序表的删除\"><a href=\"#4、顺序表的删除\" class=\"headerlink\" title=\"4、顺序表的删除\"></a>4、顺序表的删除</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">/*\n删除操作\n初始条件：顺序表L已存在\n操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1\n删除使用元素e的引用的目的是拿出对应的值\n*/</span>\nbool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>ElemType<span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> i<span class=\"token operator\">>=</span>L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//判断删除的位置是否合法</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\te <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取顺序表中对应的元素，赋值给e</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除一个元素，顺序表长度减1</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5、查找元素在顺序表中的位置\"><a href=\"#5、查找元素在顺序表中的位置\" class=\"headerlink\" title=\"5、查找元素在顺序表中的位置\"></a>5、查找元素在顺序表中的位置</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//查找成功，返回位置，位置从1开始，查找失败，返回0</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//加1就是元素在顺序表中的位置</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6、读取顺序表所有元素\"><a href=\"#6、读取顺序表所有元素\" class=\"headerlink\" title=\"6、读取顺序表所有元素\"></a>6、读取顺序表所有元素</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>SqList L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> L<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"7、运行测试\"><a href=\"#7、运行测试\" class=\"headerlink\" title=\"7、运行测试\"></a>7、运行测试</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tSqList L<span class=\"token punctuation\">;</span><span class=\"token comment\">//顺序表的名称</span>\n\tbool ret<span class=\"token punctuation\">;</span><span class=\"token comment\">//查看返回值，布尔型C++</span>\n\tElemType del<span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存要删除的元素</span>\n\t<span class=\"token comment\">//首先手动在顺序表中赋值</span>\n\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\tL<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//总共三个元素</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">ListInsert</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//第二个位置插入60</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印顺序表</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除第一个位置的元素，并把元素输出</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除元素值为%d\\n\"</span><span class=\"token punctuation\">,</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素位置为%d\\n\"</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"https://zuimiao.xyz/images/6.png\" alt=\"6\"></p>\n<h2 id=\"二、顺序表的链式存储结构\"><a href=\"#二、顺序表的链式存储结构\" class=\"headerlink\" title=\"二、顺序表的链式存储结构\"></a>二、顺序表的链式存储结构</h2><h3 id=\"2-1-单链表\"><a href=\"#2-1-单链表\" class=\"headerlink\" title=\"2.1 单链表\"></a>2.1 单链表</h3><h4 id=\"1、单链表的基本概念\"><a href=\"#1、单链表的基本概念\" class=\"headerlink\" title=\"1、单链表的基本概念\"></a>1、单链表的基本概念</h4><p>在链式结构中，除了要存储数据元素的信息外，还要存储它的后继元素的存储地址。因此，为了表示每个数据元素ai与其直接后继元素ai+1之间的逻辑关系，对数据ai来说，除了存储其本身的信息之外，还需要存储一个指示其直接后继的信息（即直接后继的存储位置）。我们吧把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点（Node）。<br>n个结点（ai的存储映像）链结成一个链表，即为线性表（a1, a2, …, an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<p><img src=\"https://zuimiao.xyz/images/3.png\" alt=\"3\"></p>\n<p>通常用头指针来标识一个单链表，如单链表厶头指针为NULL时表示一个空表。此外， 为了操作上的方便，在单链表第一个结点之前附加一个结点，称为头结点。头结点的数据域可以不设任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个元素结点。</p>\n<p><img src=\"https://zuimiao.xyz/images/4.png\" alt=\"4\"></p>\n<p>头结点和头指针的区分：不管带不带头结点，头指针都始终指向链表的第一个结点，而头结点是带头结点的链表中的第一个结点，结点内通常不存储信息。 </p>\n<h4 id=\"2、单链表的储存结构\"><a href=\"#2、单链表的储存结构\" class=\"headerlink\" title=\"2、单链表的储存结构\"></a>2、单链表的储存结构</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span><span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">//定义单链表结点类型</span>\n\tElemType data<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">//数据域</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">LNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//指针域</span>\n<span class=\"token punctuation\">&#125;</span>LNode<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>LinkList<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3、采用头插法建立单链表\"><a href=\"#3、采用头插法建立单链表\" class=\"headerlink\" title=\"3、采用头插法建立单链表\"></a>3、采用头插法建立单链表</h4><p><img src=\"https://zuimiao.xyz/images/5.png\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">LinkList <span class=\"token function\">CreatList1</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span><span class=\"token comment\">//list_head_insert</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\tL <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//带头结点的链表</span>\n\tL<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//L->data里面没放东西</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//从标准输入中读取数据</span>\n\t<span class=\"token comment\">//3 4 5 6 7 9999</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//申请一个新空间给s，强制类型转换</span>\n\t\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><span class=\"token comment\">//把读取到的值，给新空间的data成员</span>\n\t\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//让新节点的next指针指向链表的第一个元素(第一个放数据的元素）</span>\n\t\tL<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//让s作为第一个元素</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//读取标准输入</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4、采用尾插法建立单链表\"><a href=\"#4、采用尾插法建立单链表\" class=\"headerlink\" title=\"4、采用尾插法建立单链表\"></a>4、采用尾插法建立单链表</h4><p>头插法建立单链表的算法虽然简单，但生成的链表中结点的次序和输入数据的顺序不一致。若希望两者次序一致，则可采用尾插法。该方法将新结点插入到当前链表的表尾，为此必须增加一个尾指针r,使其始终指向当前链表的尾结点。</p>\n<p><img src=\"https://zuimiao.xyz/images/7.png\" alt=\"7\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">LinkList <span class=\"token function\">CreatList2</span><span class=\"token punctuation\">(</span>LinkList<span class=\"token operator\">&amp;</span> L<span class=\"token punctuation\">)</span><span class=\"token comment\">//list_tail_insert</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\tL <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//带头节点的链表</span>\n\tLNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span><span class=\"token comment\">//LinkList s,r=L也可以,r代表链表表尾节点，指向链表尾部</span>\n\t<span class=\"token comment\">//3 4 5 6 7 9999</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\ts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//让尾部节点指向新节点</span>\n\t\tr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//r指向新的表尾节点</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾节点的next指针赋值为NULL</span>\n\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5、查找对应节点的位置的值\"><a href=\"#5、查找对应节点的位置的值\" class=\"headerlink\" title=\"5、查找对应节点的位置的值\"></a>5、查找对应节点的位置的值</h4><p>在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域null。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">LinkList <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tLinkList p <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//让p指向头节点的下一个（第一个节点）</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> L<span class=\"token punctuation\">;</span><span class=\"token comment\">//i是0就返回头节点</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i是负值就返回NULL</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token comment\">//p不为空andj&lt;i</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6、按值查找表结点\"><a href=\"#6、按值查找表结点\" class=\"headerlink\" title=\"6、按值查找表结点\"></a>6、按值查找表结点</h4><p>从单链表的第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e,则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">LinkList <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLinkList p <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token operator\">-></span>data <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7、插入结点操作\"><a href=\"#7、插入结点操作\" class=\"headerlink\" title=\"7、插入结点操作\"></a>7、插入结点操作</h4><p>插入结点操作将值为x的新结点插入到单链表的第i个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i-1个结点，再在其后插入新结点。<br>算法首先调用按序号查找算法GetElem(L,i-l),查找第i-l个结点。假设返回的第i-1个结点为<em>P，然后令新结点</em>s的指针域指向<em>p的后继结点，再令结点</em>P的指针域指向新插入的结点*S。</p>\n<p><img src=\"https://zuimiao.xyz/images/8.png\" alt=\"8\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">ListFrontInsert</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLinkList p <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//拿到要插入位置的前一个位置的地址值</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span><span class=\"token comment\">//i不对</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLinkList s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8、删除节点操作\"><a href=\"#8、删除节点操作\" class=\"headerlink\" title=\"8、删除节点操作\"></a>8、删除节点操作</h4><p>删除结点操作是将单链表的第i个结点删除。先检查删除位置的合法性，后查找表中第i-1个结点，即被删结点的前驱结点，再将其删除</p>\n<p><img src=\"https://zuimiao.xyz/images/9.png\"></p>\n<p>假设结点* P为找到的被删结点的前驱结点，为实现这一操作后的逻辑关系的变化，仅需修改* P的指针域，即将* p的指针域next指向*q的下一结点。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLinkList p <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">////拿到要删除位置的前一个位置的地址值</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span><span class=\"token comment\">//要删除的位置不存在</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tLinkList q <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> q<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span><span class=\"token comment\">//要删除的位置不存在</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//断链</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放对应节点的空间</span>\n\tq <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为了避免野指针</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"9、打印链表\"><a href=\"#9、打印链表\" class=\"headerlink\" title=\"9、打印链表\"></a>9、打印链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>LinkList L<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>L <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//打印当前节点顺序</span>\n\t\tL <span class=\"token operator\">=</span> L<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"10、运行测试\"><a href=\"#10、运行测试\" class=\"headerlink\" title=\"10、运行测试\"></a>10、运行测试</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tLinkList L<span class=\"token punctuation\">;</span><span class=\"token comment\">//链表头,是结构体指针类型</span>\n\tLinkList search<span class=\"token punctuation\">;</span><span class=\"token comment\">//用来存储拿到的某一个节点</span>\n\t<span class=\"token comment\">//CreatList1(L);//输入数据可以为3 4 5 6 7 9999</span>\n\t<span class=\"token comment\">//PrintList(L);</span>\n\t<span class=\"token function\">CreatList2</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsearch <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//查找链表第二个位置的元素值</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n按序号查找成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> search<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tsearch <span class=\"token operator\">=</span> <span class=\"token function\">LocateElem</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//按值查询</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按值查询成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> search<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">ListFrontInsert</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//新节点插入第i个位置</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ListDelete</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除第第四个节点</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://zuimiao.xyz/images/10.png\" alt=\"10\"></p>\n<h3 id=\"2-2-双向链表\"><a href=\"#2-2-双向链表\" class=\"headerlink\" title=\"2.2 双向链表\"></a>2.2 双向链表</h3><h4 id=\"1、双向链表的基本概念\"><a href=\"#1、双向链表的基本概念\" class=\"headerlink\" title=\"1、双向链表的基本概念\"></a>1、双向链表的基本概念</h4><p>单链表结点中只有一个指向其后继的指针，使得单链表只能从头结点依次顺序地向后遍历。要访问某个结点的前驱结点（插入、删除操作时），只能从头开始遍历，访问后继结点的时间复杂度为O（1）,访问前驱结点的时间复杂度为O（n）。</p>\n<p>为了克服单链表的上述缺点，引入了双链表，双链表结点中有两个指针prior和next,分别指向其前驱结点和后继结点.</p>\n<p><img src=\"https://zuimiao.xyz/images/11.png\" alt=\"11\"></p>\n<h4 id=\"2、双向链表的存储结构\"><a href=\"#2、双向链表的存储结构\" class=\"headerlink\" title=\"2、双向链表的存储结构\"></a>2、双向链表的存储结构</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> ElemType<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DNode</span> <span class=\"token punctuation\">&#123;</span>\n\tElemType data<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">DNode</span><span class=\"token operator\">*</span> prior<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">//前驱，后继</span>\n<span class=\"token punctuation\">&#125;</span>DNode<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>DLinkList<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3、双向链表头插法\"><a href=\"#3、双向链表头插法\" class=\"headerlink\" title=\"3、双向链表头插法\"></a>3、双向链表头插法</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">DLinkList Dlist_head_insert(DLinkList&amp; DL)\n&#123;\n\tDNode* s; int x;\n\tDL &#x3D; (DLinkList)malloc(sizeof(DNode));&#x2F;&#x2F;带头节点的链表\n\tDL-&gt;next &#x3D; NULL;&#x2F;&#x2F;前驱指针和后继指针都填写NULL\n\tDL-&gt;prior &#x3D; NULL;\n\tscanf(&quot;%d&quot;, &amp;x);&#x2F;&#x2F;从标准输入读取数据\n\t&#x2F;&#x2F;3 4 5 6 7 9999\n\twhile (x !&#x3D; 9999) &#123;\n\t\ts &#x3D; (DLinkList)malloc(sizeof(DNode));&#x2F;&#x2F;申请应该空间，强制转换类型\n\t\ts-&gt;data &#x3D; x;\n\t\ts-&gt;next &#x3D; DL-&gt;next;\n\t\tif (DL-&gt;next !&#x3D; NULL)\n\t\t&#123;\n\t\t\tDL-&gt;next-&gt;prior &#x3D; s;\n\t\t&#125;\n\t\ts-&gt;prior &#x3D; DL;&#x2F;&#x2F;要插入的节点指向头节点\n\t\tDL-&gt;next &#x3D; s;\n\t\tscanf(&quot;%d&quot;, &amp;x);\n\t&#125;\n\treturn DL;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4、双向链表尾插法\"><a href=\"#4、双向链表尾插法\" class=\"headerlink\" title=\"4、双向链表尾插法\"></a>4、双向链表尾插法</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">DLinkList <span class=\"token function\">Dlist_tail_insert</span><span class=\"token punctuation\">(</span>DLinkList<span class=\"token operator\">&amp;</span> DL<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\tDL <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DLinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//带头节点的链表</span>\n\tDNode<span class=\"token operator\">*</span> s<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">=</span> DL<span class=\"token punctuation\">;</span><span class=\"token comment\">//r代表尾指针</span>\n\tDL<span class=\"token operator\">-></span>prior <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\ts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\tr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t\ts<span class=\"token operator\">-></span>prior <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n\t\tr <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span><span class=\"token comment\">//r指向新的表位节点</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tr<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾指针的next指针赋值为NULL</span>\n\t<span class=\"token keyword\">return</span> DL<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5、按序号查找节点值\"><a href=\"#5、按序号查找节点值\" class=\"headerlink\" title=\"5、按序号查找节点值\"></a>5、按序号查找节点值</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">DNode<span class=\"token operator\">*</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>DLinkList DL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tDNode<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> DL<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> DL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6、插入节点操作\"><a href=\"#6、插入节点操作\" class=\"headerlink\" title=\"6、插入节点操作\"></a>6、插入节点操作</h4><p>在双链表中P所指的结点之后插入结点*s,其指针的变化过程如图所示。</p>\n<p><img src=\"https://zuimiao.xyz/images/12.png\" alt=\"12\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">DListFrontInsert</span><span class=\"token punctuation\">(</span>DLinkList DL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> ElemType e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDLinkList p <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//找前一个位置的地址</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tDLinkList s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DLinkList<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//为新插入的节点申请空间</span>\n\ts<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prior <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\ts<span class=\"token operator\">-></span>prior <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-、删除节点操作\"><a href=\"#7-、删除节点操作\" class=\"headerlink\" title=\"7 、删除节点操作\"></a>7 、删除节点操作</h4><p>删除双链表中结点* P的后继结点* q，其指针的变化过程如图所示。</p>\n<p><img src=\"https://zuimiao.xyz/images/13.png\" alt=\"13\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">bool <span class=\"token function\">DListDelete</span><span class=\"token punctuation\">(</span>DLinkList DL<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDLinkList p <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tDLinkList q<span class=\"token punctuation\">;</span>\n\tq <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//删除的元素不存在</span>\n\t\t<span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> q<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">//断链</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token operator\">-></span>next <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tq<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prior <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放对应节点的空间</span>\n\t<span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8、打印链表\"><a href=\"#8、打印链表\" class=\"headerlink\" title=\"8、打印链表\"></a>8、打印链表</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>DLinkList DL<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDL <span class=\"token operator\">=</span> DL<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>DL <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%3d\"</span><span class=\"token punctuation\">,</span> DL<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tDL <span class=\"token operator\">=</span> DL<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"9、运行测试\"><a href=\"#9、运行测试\" class=\"headerlink\" title=\"9、运行测试\"></a>9、运行测试</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tDLinkList DL<span class=\"token punctuation\">;</span>\n\tDLinkList search<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//Dlist_head_insert(DL);//头插</span>\n\t<span class=\"token comment\">//3 4 5 6 7 9999</span>\n\t<span class=\"token comment\">//PrintList(DL);</span>\n\t<span class=\"token function\">Dlist_tail_insert</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//尾插</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsearch <span class=\"token operator\">=</span> <span class=\"token function\">GetElem</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>search <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按序号查找成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> search<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">DListFrontInsert</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">DListDelete</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">PrintList</span><span class=\"token punctuation\">(</span>DL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://zuimiao.xyz/images/14.png\" alt=\"14\"></p>\n<h3 id=\"2-3-循环链表\"><a href=\"#2-3-循环链表\" class=\"headerlink\" title=\"2.3 循环链表\"></a>2.3 循环链表</h3><h4 id=\"2-3-1-循环单链表\"><a href=\"#2-3-1-循环单链表\" class=\"headerlink\" title=\"2.3.1 循环单链表\"></a>2.3.1 循环单链表</h4><p>循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL,而改为指向头结点,从而整个链表形成一个环，如图所示。</p>\n<p>在循环单链表中，表尾结点* r的next域指向L,故表中没有指针域为NULL的结点，因此,循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针。</p>\n<p><img src=\"https://zuimiao.xyz/images/15.png\" alt=\"15\"></p>\n<p>循环单链表的插入、删除算法与单链表的几乎一样，所不同的是若操作是在表尾进行，则执行的操作不同，以让单链表继续保持循环的性质。当然，正是因为循环单链表是一个“环”，因此在任何一个位置上的插入和删除操作都是等价的，无须判断是否是表尾。在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表可以从表中的任意一个结点开始遍历整个链表。有时对单链表常做的操作是在表头和表尾进行的，此时对循环单链表不设头指针而仅设尾指针，从而使得操作效率更高。其原因是，若设的是头指针，对表尾进行操作需要O(n)的时间复杂度，而若设的是尾指针r, r-&gt;next即为头指针，对表头与表尾进行操作都只需要O(1)的时间复杂度。</p>\n<h4 id=\"2-3-2-循环双链表\"><a href=\"#2-3-2-循环双链表\" class=\"headerlink\" title=\"2.3.2 循环双链表\"></a>2.3.2 循环双链表</h4><p>由循环单链表的定义不难推岀循环双链表。不同的是在循环双链表中，头结点的prior指针还要指向表尾结点，如图所示。</p>\n<p><img src=\"https://zuimiao.xyz/images/16.png\" alt=\"16\"></p>\n<p>在循环双链表L中，某结点* p为尾结点时，p-&gt;next&#x3D;&#x3D;L；当循环双链表为空表时，其头结点的prior域和next域都等于L。</p>\n<h3 id=\"2-4-静态链表\"><a href=\"#2-4-静态链表\" class=\"headerlink\" title=\"2.4 静态链表\"></a>2.4 静态链表</h3><p>静态链表借助数组来描述线性表的链式存储结构，结点也有数据域data和指针域next,与前面所讲的链表中的指针不同的是，这里的指针是结点的相对地址(数组下标)，又称游标。和顺序表一样，静态链表也要预先分配一块连续的内存空间。静态链表和单链表的对应关系如图所示。</p>\n<p><img src=\"https://zuimiao.xyz/images/17.png\" alt=\"17\"></p>\n<h4 id=\"静态链表的结构\"><a href=\"#静态链表的结构\" class=\"headerlink\" title=\"静态链表的结构\"></a>静态链表的结构</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">#define MaxSize 50\t&#x2F;&#x2F;链表的最大长度\ntypedef struct&#123;\n\tElemType data;\t&#x2F;&#x2F;存储数据元素\n\tint next;\t&#x2F;&#x2F;下一个元素的数组下标\n&#125;SLinkList[MaxSize];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>静态链表以next&#x3D;&#x3D;-l作为其结束的标志。静态链表的插入、删除操作与动态链表的相同，只需要修改指针，而不需要移动元素。总体来说，静态链表没有单链表使用起来方便，但在一些不支持指针的高级语言(如Basic)中，这是一种非常巧妙的设计方法。</p>\n","feature":true,"text":"线性表 线性表的定义线性表（List）：零个或多个数据元素的有限序列。 线性表的数据集合为{a1,a2,…,an}，假设每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":1,"path":"api/categories/C-C.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8\"><span class=\"toc-text\">线性表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">线性表的定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">一、顺序表的顺序存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1、顺序表的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2、顺序表存储结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">3、顺序表的插入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">4、顺序表的删除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E5%9C%A8%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">5、查找元素在顺序表中的位置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E8%AF%BB%E5%8F%96%E9%A1%BA%E5%BA%8F%E8%A1%A8%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">6、读取顺序表所有元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">7、运行测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">二、顺序表的链式存储结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.1 单链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1、单链表的基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%82%A8%E5%AD%98%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2、单链表的储存结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%87%87%E7%94%A8%E5%A4%B4%E6%8F%92%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">3、采用头插法建立单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%87%87%E7%94%A8%E5%B0%BE%E6%8F%92%E6%B3%95%E5%BB%BA%E7%AB%8B%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">4、采用尾插法建立单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E8%8A%82%E7%82%B9%E7%9A%84%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5、查找对应节点的位置的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%8C%89%E5%80%BC%E6%9F%A5%E6%89%BE%E8%A1%A8%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">6、按值查找表结点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7%E3%80%81%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">7、插入结点操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E3%80%81%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">8、删除节点操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9%E3%80%81%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">9、打印链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#10%E3%80%81%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">10、运行测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.2 双向链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1、双向链表的基本概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2、双向链表的存储结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%A4%B4%E6%8F%92%E6%B3%95\"><span class=\"toc-text\">3、双向链表头插法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E5%B0%BE%E6%8F%92%E6%B3%95\"><span class=\"toc-text\">4、双向链表尾插法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%8C%89%E5%BA%8F%E5%8F%B7%E6%9F%A5%E6%89%BE%E8%8A%82%E7%82%B9%E5%80%BC\"><span class=\"toc-text\">5、按序号查找节点值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">6、插入节点操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E3%80%81%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">7 、删除节点操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8%E3%80%81%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">8、打印链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9%E3%80%81%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">9、运行测试</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.3 循环链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-1-%E5%BE%AA%E7%8E%AF%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.3.1 循环单链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-2-%E5%BE%AA%E7%8E%AF%E5%8F%8C%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.3.2 循环双链表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">2.4 静态链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">静态链表的结构</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"XXXWANG","slug":"blog-author","avatar":"https://zuimiao.xyz/images/touxiang.png","link":"/","description":"为什么不去码头整点薯条呢","socials":{"github":"https://github.com/zuimiao33","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://zuimiao.xyz/images/icon_bilibili.png","link":"https://space.bilibili.com/12238082?spm_id_from=333.1007.0.0"}}}},"mapped":true,"prev_post":{"title":"正则表达式","uid":"03a1af7058cec8bb8efe418ed228e157","slug":"正则表达式","date":"2022-11-09T06:45:20.000Z","updated":"2022-11-09T07:07:05.548Z","comments":true,"path":"api/articles/正则表达式.json","keywords":null,"cover":"https://zuimiao.xyz/images/cover1.jpg","text":"正则表达式Regular Expression, 正则表达式, ⼀种使⽤表达式的⽅式对字符串进⾏匹配的语法规则.我们抓取到的⽹⻚源代码本质上就是⼀个超⻓的字符串, 想从⾥⾯提取内容.⽤正则再合适不过了. 正则的优点: 速度快, 效率⾼, 准确性⾼ 正则的缺点: 新⼿上⼿难度有点⼉...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[{"name":"爬虫","slug":"爬虫","count":1,"path":"api/tags/爬虫.json"}],"author":{"name":"XXXWANG","slug":"blog-author","avatar":"https://zuimiao.xyz/images/touxiang.png","link":"/","description":"为什么不去码头整点薯条呢","socials":{"github":"https://github.com/zuimiao33","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://zuimiao.xyz/images/icon_bilibili.png","link":"https://space.bilibili.com/12238082?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{}}