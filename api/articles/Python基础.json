{"title":"Python基础","uid":"9b69dffe0262764ac691bc95bc415c22","slug":"Python基础","date":"2022-11-09T03:45:20.000Z","updated":"2022-11-09T06:21:48.435Z","comments":true,"path":"api/articles/Python基础.json","keywords":null,"cover":"https://zuimiao.xyz/images/cover3.jpg","content":"<h1 id=\"Python3入门\"><a href=\"#Python3入门\" class=\"headerlink\" title=\"Python3入门\"></a>Python3入门</h1><p>Author:<em>XXXWANG</em></p>\n<p>Date:2022&#x2F;6&#x2F;1</p>\n<p>参考资料：Python Crash Course by Eric Matthes</p>\n<h2 id=\"一、变量和简单数据类型\"><a href=\"#一、变量和简单数据类型\" class=\"headerlink\" title=\"一、变量和简单数据类型\"></a>一、变量和简单数据类型</h2><h3 id=\"1-1-变量\"><a href=\"#1-1-变量\" class=\"headerlink\" title=\"1.1 变量\"></a>1.1 变量</h3><ul>\n<li>内存比作一个仓库  </li>\n<li>变量，用于在内存中存放数据的容器</li>\n<li>变量名比作货物标号，变量值比作货物<br>获取变量地址<code>id(variable)</code></li>\n</ul>\n<h4 id=\"1-1-1-变量定义规则\"><a href=\"#1-1-1-变量定义规则\" class=\"headerlink\" title=\"1.1.1 变量定义规则\"></a>1.1.1 变量定义规则</h4><p>1、全局变量尽量在文件开头<br>2、变量只能是数字、字符串、“_”的组合<br>3、变量的第一个字符不能是数字<br>4、关键字不能作为变量名</p>\n<p><strong>变量名定义规范</strong>  </p>\n<p>1、驼峰体</p>\n<pre><code>AgeOfOldboy = 45  \nNumberOfStudents = 11  \n</code></pre>\n<p>2、下划线（官方推荐）</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age_of_oldboy <span class=\"token operator\">=</span> <span class=\"token number\">45</span>  \nnumber_of_students <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>定义变量不好的方式</strong> </p>\n<p>1、用拼音、中文作为变量<br>2、变量名过长<br>3、变量名不要没有意义<br>4、首字母大写（大写用于定义类名）</p>\n<h4 id=\"1-1-2-变量的修改与删除\"><a href=\"#1-1-2-变量的修改与删除\" class=\"headerlink\" title=\"1.1.2  变量的修改与删除\"></a>1.1.2  变量的修改与删除</h4><ul>\n<li>变量值修改，对应地址也会变(如仓库中将货号贴到其余位置，原位置物品将自动被删除)</li>\n<li>删除变量<code>del variable</code></li>\n</ul>\n<h3 id=\"1-2-字符串\"><a href=\"#1-2-字符串\" class=\"headerlink\" title=\"1.2 字符串\"></a>1.2 字符串</h3><p>一系列字符，用引号括起来的都是字符串，可以单引号，也可以是双引号。多引号用于多行字符串。</p>\n<h4 id=\"1-2-1-使用方法修改字符串的大小写\"><a href=\"#1-2-1-使用方法修改字符串的大小写\" class=\"headerlink\" title=\"1.2.1 使用方法修改字符串的大小写\"></a>1.2.1 使用方法修改字符串的大小写</h4><ul>\n<li>首字母大写<code>name.titile()</code></li>\n<li>全部大写  <code>name.upper()</code></li>\n<li>全部小写  <code>name.lower()</code></li>\n</ul>\n<h4 id=\"1-2-2-合并字符串\"><a href=\"#1-2-2-合并字符串\" class=\"headerlink\" title=\"1.2.2 合并字符串\"></a>1.2.2 合并字符串</h4><p>使用”+”来合并字符串</p>\n<h4 id=\"1-2-3-制表符或换行符添加空白\"><a href=\"#1-2-3-制表符或换行符添加空白\" class=\"headerlink\" title=\"1.2.3 制表符或换行符添加空白\"></a>1.2.3 制表符或换行符添加空白</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\\t\t<span class=\"token comment\">#制表符</span>\n\\n  <span class=\"token comment\">#换行符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-2-4-删除空白\"><a href=\"#1-2-4-删除空白\" class=\"headerlink\" title=\"1.2.4 删除空白\"></a>1.2.4 删除空白</h4><p>空白很重要，在一些网站检查用户名时，额外的空格会导致错误。使用</p>\n<p><code>str.strip()</code></p>\n<p>即可去除末端多余空白。（删除是暂时的，若想永久保存需重新赋值。)</p>\n<p><code>str.lstrip</code>去除左边空白</p>\n<p><code>str.rstrip</code>去除右边空白</p>\n<h4 id=\"1-2-5-字符串的格式化输出\"><a href=\"#1-2-5-字符串的格式化输出\" class=\"headerlink\" title=\"1.2.5 字符串的格式化输出\"></a>1.2.5 字符串的格式化输出</h4><p>如果单纯使用字符串的+是字符串拼接会使代码繁琐，下面将用format方法使字符串格式化输出。</p>\n<p><strong>format方法老版</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pizzas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chess'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orleans'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> pizza <span class=\"token keyword\">in</span> pizzas<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There is a &#123;&#125; pizza\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pizza<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>format方法新版</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pizzas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chess'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orleans'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> pizza <span class=\"token keyword\">in</span> pizzas<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"There is a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>pizza<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> pizza\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>第二种方法明显更加简便快捷。</p>\n<h3 id=\"1-3-数字\"><a href=\"#1-3-数字\" class=\"headerlink\" title=\"1.3 数字\"></a>1.3 数字</h3><h4 id=\"1-3-1-整数\"><a href=\"#1-3-1-整数\" class=\"headerlink\" title=\"1.3.1 整数\"></a>1.3.1 整数</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 乘方</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-3-2-浮点数\"><a href=\"#1-3-2-浮点数\" class=\"headerlink\" title=\"1.3.2 浮点数\"></a>1.3.2 浮点数</h4><p>结果的小数位数不确定</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span>\n<span class=\"token number\">0.2</span>\n<span class=\"token number\">0.2</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span>\n<span class=\"token number\">0.30000000000000004</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span>\n<span class=\"token number\">0.30000000000000004</span>\n<span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span>\n<span class=\"token number\">0.2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-3-3-使用str-函数避免类型错误\"><a href=\"#1-3-3-使用str-函数避免类型错误\" class=\"headerlink\" title=\"1.3.3 使用str()函数避免类型错误\"></a>1.3.3 使用str()函数避免类型错误</h4><p>使用str()函数将数字类型转变为字符串类型</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">\"Happy \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"rd Birthday!\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1-4-注释\"><a href=\"#1-4-注释\" class=\"headerlink\" title=\"1.4 注释\"></a>1.4 注释</h3><p>注释可以对代码添加说明，解决复杂问题提供思路。</p>\n<h5 id=\"1-4-1-如何编写注释\"><a href=\"#1-4-1-如何编写注释\" class=\"headerlink\" title=\"1.4.1 如何编写注释\"></a>1.4.1 如何编写注释</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 向大家问好</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Python people.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-4-2-该编写怎样的注释\"><a href=\"#1-4-2-该编写怎样的注释\" class=\"headerlink\" title=\"1.4.2 该编写怎样的注释\"></a>1.4.2 该编写怎样的注释</h4><p>在程序中编写描述性注释，简洁、清晰。</p>\n<h4 id=\"1-4-3-Python之禅\"><a href=\"#1-4-3-Python之禅\" class=\"headerlink\" title=\"1.4.3 Python之禅\"></a>1.4.3 Python之禅</h4><p><code>import this</code></p>\n<p><u>Beautiful is better than ugly.</u><br>Explicit is better than implicit.<br><u>Simple is better than complex.</u><br><u>Complex is better than complicated.</u><br>Flat is better than nested.<br>Sparse is better than dense.<br><u>Readability counts.</u><br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br><u>There should be one– and preferably only one –obvious way to do it.</u><br>Although that way may not be obvious at first unless you’re Dutch.<br><u>Now is better than never.</u><br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!<br>Hello Python people.</p>\n<h3 id=\"二、-列表介绍\"><a href=\"#二、-列表介绍\" class=\"headerlink\" title=\"二、 列表介绍\"></a>二、 列表介绍</h3><h3 id=\"2-1-列表是什么\"><a href=\"#2-1-列表是什么\" class=\"headerlink\" title=\"2.1 列表是什么\"></a>2.1 列表是什么</h3><p><strong>列表：</strong>按特定顺序排列的元素组成。（字母，数字，列表…任何类型的元素)通常同复数命名列表。[ ]来表示列表。</p>\n<p>创建列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-1-1-访问列表元素\"><a href=\"#2-1-1-访问列表元素\" class=\"headerlink\" title=\"2.1.1 访问列表元素\"></a>2.1.1 访问列表元素</h4><p>索引从0开始,如:name[0] 则去除列表第一个数</p>\n<p>索引为-1时取最后一个</p>\n<h3 id=\"2-2-修改、添加、和删除元素\"><a href=\"#2-2-修改、添加、和删除元素\" class=\"headerlink\" title=\"2.2 修改、添加、和删除元素\"></a>2.2 修改、添加、和删除元素</h3><h4 id=\"2-2-1-修改列表元素\"><a href=\"#2-2-1-修改列表元素\" class=\"headerlink\" title=\"2.2.1 修改列表元素\"></a>2.2.1 修改列表元素</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>motorcycles<span class=\"token punctuation\">)</span>\nmotorcycles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ducati'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>motorcycles<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-列表中添加元素\"><a href=\"#2-2-2-列表中添加元素\" class=\"headerlink\" title=\"2.2.2 列表中添加元素\"></a>2.2.2 列表中添加元素</h4><p>1.在列表末尾添加元素</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\nmotorcycles<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'ducati'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2.在列表中插入元素</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\nmotorcycles<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ducati'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在指定索引处插入元素。</p>\n<h4 id=\"2-2-3-从列表中删除元素\"><a href=\"#2-2-3-从列表中删除元素\" class=\"headerlink\" title=\"2.2.3 从列表中删除元素\"></a>2.2.3 从列表中删除元素</h4><p>1.del是python全局函数，哪里都可以使用。(使用索引删除)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">del</span> motorcycles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2.使用pop（）删除</p>\n<p>pop()可删除列表末尾的元素，并返回弹出值。列表就像栈，删除列表末尾相当于弹出栈顶元素。也可使用索引删除</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\npopped_motorcycles <span class=\"token operator\">=</span> motorcycles<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>如果删除的值没用就用del,若要重复利用则用pop。</li>\n</ul>\n<p>3.根据值删除</p>\n<p>remove()</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"> motorcycles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yamaha'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'suzuki'</span><span class=\"token punctuation\">]</span>\n motorcycles<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'honda'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>remove()只删除第一个指定的值（含多个重复值时）</strong></p>\n<h3 id=\"2-3-组织列表\"><a href=\"#2-3-组织列表\" class=\"headerlink\" title=\"2.3 组织列表\"></a>2.3 组织列表</h3><p>对列表元素进行排序,默认按照小写字母进行排序。有大写字母时排序复杂</p>\n<h4 id=\"2-3-1-使用sort-对列表进行永久性排序\"><a href=\"#2-3-1-使用sort-对列表进行永久性排序\" class=\"headerlink\" title=\"2.3.1 使用sort()对列表进行永久性排序\"></a>2.3.1 使用sort()对列表进行永久性排序</h4><p>sort()方法能轻松将字母顺序进行排序</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bmw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toyota'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'subaru'</span><span class=\"token punctuation\">]</span>\ncars<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>若要按字母相反的顺序排序</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bmw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toyota'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'subaru'</span><span class=\"token punctuation\">]</span>\ncars<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这两种方法都是永久性更改，原来列表顺序不可恢复</p>\n<h4 id=\"2-3-2-使用函数sorted-对列表进行临时排序\"><a href=\"#2-3-2-使用函数sorted-对列表进行临时排序\" class=\"headerlink\" title=\"2.3.2 使用函数sorted()对列表进行临时排序\"></a>2.3.2 使用函数sorted()对列表进行临时排序</h4><p>sorted()函数能让列表按照指定顺序排列，同时也不会影响列表原始排列顺序。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cars <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bmw'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'toyota'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'subaru'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the original list:\\n\"</span><span class=\"token punctuation\">,</span> cars<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the sorted list:\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>cars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is the original list again:\\n\"</span><span class=\"token punctuation\">,</span> cars<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-3-倒着打印列表\"><a href=\"#2-3-3-倒着打印列表\" class=\"headerlink\" title=\"2.3.3 倒着打印列表\"></a>2.3.3 倒着打印列表</h4><p><code>cars.reverse()</code></p>\n<p>无返回值,需重新打印</p>\n<p>并非按照字母顺序相反排序，而是直接反转列表所有元素。</p>\n<h4 id=\"2-3-4-确定列表的长度\"><a href=\"#2-3-4-确定列表的长度\" class=\"headerlink\" title=\"2.3.4 确定列表的长度\"></a>2.3.4 确定列表的长度</h4><p>使用函数len()快速获取长度</p>\n<p><code>len(cars)</code></p>\n<h2 id=\"三、操作列表\"><a href=\"#三、操作列表\" class=\"headerlink\" title=\"三、操作列表\"></a>三、操作列表</h2><h4 id=\"3-1遍历列表\"><a href=\"#3-1遍历列表\" class=\"headerlink\" title=\"3.1遍历列表\"></a>3.1遍历列表</h4><p>for循环是python中的一种循环功能，能够是重复工作简单化。如取出列表中的每一个元素.</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'alice'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'eric'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'steve'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>name是此次循环中的临时变量,每经历一次循环分别取出对应值赋值给name,如第一次循环将names中的alice赋值给name。临时变量可指定任意名称,通常用单复数区别变量名和列表名.</p>\n<ul>\n<li><p>注：for循环内的语句都需缩进</p>\n</li>\n<li><p>for循环执行结束后才会执行后面的语句</p>\n</li>\n</ul>\n<h4 id=\"3-2-避免缩进错误\"><a href=\"#3-2-避免缩进错误\" class=\"headerlink\" title=\"3.2 避免缩进错误\"></a>3.2 避免缩进错误</h4><p><strong>不必要的缩进</strong></p>\n  <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Python world!\"</span> \n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>不要遗漏for后面的冒号</strong></p>\n <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> magician <span class=\"token keyword\">in</span> magicians\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>magician<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p> magicians后面的冒号：告诉python下一行是循环第一行若没有则会报错：</p>\n<h3 id=\"3-3-创建数值列表\"><a href=\"#3-3-创建数值列表\" class=\"headerlink\" title=\"3.3 创建数值列表\"></a>3.3 创建数值列表</h3><h4 id=\"3-3-1-使用函数range\"><a href=\"#3-3-1-使用函数range\" class=\"headerlink\" title=\"3.3.1 使用函数range()\"></a>3.3.1 使用函数range()</h4><p>如何轻松打印一系列数字</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>打印的结果是(左闭右开)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-2-使用range-创建数值列表\"><a href=\"#3-3-2-使用range-创建数值列表\" class=\"headerlink\" title=\"3.3.2 使用range()创建数值列表\"></a>3.3.2 使用range()创建数值列表</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">numbers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如此创建了一个列表[1,2,3,4,5]</p>\n<p><strong>建立一个1~9的平方的列表</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    squares<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>value <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>range函数包含步长功能</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">even_numbers <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#步长为2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>even_numbers<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就从1开始每次加2取为列表元素得到列表[1,3,5]</p>\n<h4 id=\"3-3-3-对数字列表进行统计运算\"><a href=\"#3-3-3-对数字列表进行统计运算\" class=\"headerlink\" title=\"3.3.3 对数字列表进行统计运算\"></a>3.3.3 对数字列表进行统计运算</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#最小值</span>\n<span class=\"token number\">0</span>\n<span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#最大值</span>\n<span class=\"token number\">9</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#求和</span>\n<span class=\"token number\">45</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"3-3-4-列表解析\"><a href=\"#3-3-4-列表解析\" class=\"headerlink\" title=\"3.3.4 列表解析\"></a>3.3.4 列表解析</h4><p>上述生成squares列表用了三四行代码，而列表解析能使用一行代码进行解决。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">squares &#x3D; [value**2 for value in range(1,10)]\nprint(squares)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注：这里的for后面没有冒号</strong></p>\n<h3 id=\"3-4-使用列表的一部分\"><a href=\"#3-4-使用列表的一部分\" class=\"headerlink\" title=\"3.4 使用列表的一部分\"></a>3.4 使用列表的一部分</h3><p>处理列表的部分元素——<strong>切片</strong></p>\n<h4 id=\"3-4-1-切片\"><a href=\"#3-4-1-切片\" class=\"headerlink\" title=\"3.4.1 切片\"></a>3.4.1 切片</h4><p>切片需要指定第一个元素和最后一个元素的索引</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">players <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'charles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'martina'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'michael'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'florence'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eli'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>若没有指定第一个值则从开头开始[:3],如果切到末尾则省去第二个值[1:]。</p>\n<h4 id=\"3-4-2-遍历切片\"><a href=\"#3-4-2-遍历切片\" class=\"headerlink\" title=\"3.4.2 遍历切片\"></a>3.4.2 遍历切片</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">players <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'charles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'martina'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'michael'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'florence'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'eli'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here are the first three players on my team:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> player <span class=\"token keyword\">in</span> players<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-4-3-复制列表\"><a href=\"#3-4-3-复制列表\" class=\"headerlink\" title=\"3.4.3 复制列表\"></a>3.4.3 复制列表</h4><p>原理：切片获得整个列表然后赋值</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">my_foods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pizza'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'falafel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carrot cake'</span><span class=\"token punctuation\">]</span> \nfriend_foods <span class=\"token operator\">=</span> my_foods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\t<span class=\"token comment\"># friend_foods = my_foods不行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My favorite foods are:\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_foods<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMy friend's favorite foods are:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>friend_foods<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>friend_foods &#x3D; my_foods不行，这是因为将变量friend_foods指向变量my_foods，将同步变化.</p>\n<h3 id=\"3-5-元组\"><a href=\"#3-5-元组\" class=\"headerlink\" title=\"3.5 元组\"></a>3.5 元组</h3><p>列表非常适合储存一些可变的数据集，而有时需要创建一下不可以修改的元素，元组可以满足这种需求。不可变的列表叫做元组。</p>\n<h4 id=\"3-5-1-定义元组\"><a href=\"#3-5-1-定义元组\" class=\"headerlink\" title=\"3.5.1 定义元组\"></a>3.5.1 定义元组</h4><p>元组非常像列表,但是使用()圈起来。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dimensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dimensions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dimensions<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-5-2-修改元组变量\"><a href=\"#3-5-2-修改元组变量\" class=\"headerlink\" title=\"3.5.2 修改元组变量\"></a>3.5.2 修改元组变量</h4><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">dimensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original dimensions:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> dimension <span class=\"token keyword\">in</span> dimensions<span class=\"token punctuation\">:</span>\n \t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dimension<span class=\"token punctuation\">)</span> \ndimensions <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nModified dimensions:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> dimension <span class=\"token keyword\">in</span> dimensions<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dimension<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-6-设置代码格式\"><a href=\"#3-6-设置代码格式\" class=\"headerlink\" title=\"3.6 设置代码格式\"></a>3.6 设置代码格式</h3><h4 id=\"3-6-1-格式设置指南\"><a href=\"#3-6-1-格式设置指南\" class=\"headerlink\" title=\"3.6.1 格式设置指南\"></a>3.6.1 格式设置指南</h4><ul>\n<li>PEP 8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。</li>\n</ul>\n<h4 id=\"3-6-2-缩进\"><a href=\"#3-6-2-缩进\" class=\"headerlink\" title=\"3.6.2 缩进\"></a>3.6.2 缩进</h4><p>PEP 8建议每级缩进都使用四个空格，这既可提高可读性，又留下了足够的多级缩进空间。（一个tab)</p>\n<h4 id=\"3-6-3-行长\"><a href=\"#3-6-3-行长\" class=\"headerlink\" title=\"3.6.3 行长\"></a>3.6.3 行长</h4><p>最好不要超过编译器上面的垂直参考线。</p>\n<h4 id=\"3-6-4-空行\"><a href=\"#3-6-4-空行\" class=\"headerlink\" title=\"3.6.4 空行\"></a>3.6.4 空行</h4><p>要将程序的不同部分分开，可使用空行。如果你有5行创建列表的代码，还有3行处理该列表的代码，那么用一个空行将这两部分隔开是合适的。然而，你不应使用三四个空行将它们隔开。</p>\n<h2 id=\"四、if语句\"><a href=\"#四、if语句\" class=\"headerlink\" title=\"四、if语句\"></a>四、if语句</h2><p>条件测试，以用来选择需要的条件。</p>\n<h3 id=\"4-1-条件测试\"><a href=\"#4-1-条件测试\" class=\"headerlink\" title=\"4.1 条件测试\"></a>4.1 条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这叫做条件测试。如果测试的值为True则执行if后面的代码，如果为False则忽略。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">car <span class=\"token operator\">=</span> <span class=\"token string\">'audi'</span>\ncar <span class=\"token operator\">==</span> <span class=\"token string\">'bwm'</span>\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>检测时需要注意大小写，大小写也会影响判断。</p>\n<h5 id=\"4-1-1-检查是否不相等\"><a href=\"#4-1-1-检查是否不相等\" class=\"headerlink\" title=\"4.1.1 检查是否不相等\"></a>4.1.1 检查是否不相等</h5><p>判断两个值是否不等，可结合使用惊叹号和等号（! &#x3D;），其中的惊叹号表示不。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">car <span class=\"token operator\">=</span> <span class=\"token string\">'bmw'</span>\n<span class=\"token keyword\">if</span> car <span class=\"token operator\">!=</span> <span class=\"token string\">'audi'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I don't like it!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-1-2-比较数字\"><a href=\"#4-1-2-比较数字\" class=\"headerlink\" title=\"4.1.2 比较数字\"></a>4.1.2 比较数字</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\nage <span class=\"token operator\">==</span> <span class=\"token number\">18</span>\n<span class=\"token operator\">>></span><span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-1-2-检查多个条件\"><a href=\"#4-1-2-检查多个条件\" class=\"headerlink\" title=\"4.1.2 检查多个条件\"></a>4.1.2 检查多个条件</h4><ul>\n<li>使用and检查多个条件，如果多个条件均成立则返回True否则返回False.</li>\n<li>使用or检查多个条件，有一个条件成立就返回True，都不成立返回False.</li>\n</ul>\n<h4 id=\"4-1-3-检查特定值是否在列表中\"><a href=\"#4-1-3-检查特定值是否在列表中\" class=\"headerlink\" title=\"4.1.3 检查特定值是否在列表中\"></a>4.1.3 检查特定值是否在列表中</h4><p>要判断特定的值是否已包含在列表中，可使用关键字in。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">requested_toppings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mushrooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'onions'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">]</span> \n<span class=\"token string\">'mushrooms'</span> <span class=\"token keyword\">in</span> requested_toppings \n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token boolean\">True</span>\n<span class=\"token string\">'pepperoni'</span> <span class=\"token keyword\">in</span> requested_toppings\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-1-4-检查特定值是否不包含在列表中\"><a href=\"#4-1-4-检查特定值是否不包含在列表中\" class=\"headerlink\" title=\"4.1.4 检查特定值是否不包含在列表中\"></a>4.1.4 检查特定值是否不包含在列表中</h4><p>例如一个论坛中一个用户被禁言，在用户评论时检查他是否处于禁言名单中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">banned_users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'andrew'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'carolina'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'david'</span><span class=\"token punctuation\">]</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'marie'</span> \n<span class=\"token keyword\">if</span> user <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> banned_users<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", you can post a response if you wish.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-1-5-布尔表达式\"><a href=\"#4-1-5-布尔表达式\" class=\"headerlink\" title=\"4.1.5 布尔表达式\"></a>4.1.5 布尔表达式</h4><p>条件测试的别名，通常用于记录条件。如游戏是否正在运行，用户是否可以编辑网站特定的内容。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">game_active <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\ncan_edit <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-2-if语句\"><a href=\"#4-2-if语句\" class=\"headerlink\" title=\"4.2 if语句\"></a>4.2 if语句</h3><h4 id=\"4-2-1-if-else-语句\"><a href=\"#4-2-1-if-else-语句\" class=\"headerlink\" title=\"4.2.1 if else 语句\"></a>4.2.1 if else 语句</h4><p>if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token number\">17</span>\n<span class=\"token keyword\">if</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You are old enough to vote!\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Have you registered to vote yet?\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sorry, you are too young to vote.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please register to vote as soon as you turn 18!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-2-2-if-elif-else-语句\"><a href=\"#4-2-2-if-elif-else-语句\" class=\"headerlink\" title=\"4.2.2 if elif else 语句\"></a>4.2.2 if elif else 语句</h4><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。</p>\n<p>例：根据年龄收费的游乐园</p>\n<ul>\n<li>4岁以下免费</li>\n<li>4~18岁收费5美元</li>\n<li>18岁（含）以上收费10美元。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">age <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n<span class=\"token keyword\">if</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your admission cost is $0.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> age <span class=\"token operator\">&lt;</span> <span class=\"token number\">18</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your admission cost is $5.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your admission cost is $10.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"五、字典\"><a href=\"#五、字典\" class=\"headerlink\" title=\"五、字典\"></a>五、字典</h2><p>字典储存的值为key-value形式，创建字典name&#x3D;{ }</p>\n<ul>\n<li>字典查询可以直接取出，用于字典量很大时查询某一个值，而不用遍历列表速度太慢。</li>\n</ul>\n<p>如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">alien_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5-1-使用字典\"><a href=\"#5-1-使用字典\" class=\"headerlink\" title=\"5.1 使用字典\"></a>5.1 使用字典</h3><h4 id=\"5-1-1-访问字典中的值\"><a href=\"#5-1-1-访问字典中的值\" class=\"headerlink\" title=\"5.1.1 访问字典中的值\"></a>5.1.1 访问字典中的值</h4><p><code>alien_0 = &#123;&#39;color&#39;: &#39;green&#39;&#125;</code>一个字典</p>\n<p>color 为key,green为value。key就好比钥匙，value就是锁</p>\n<p><code>print(alien_0[&#39;color&#39;])</code>这样就能取出key对应的值</p>\n<h4 id=\"5-1-2-添加键值对\"><a href=\"#5-1-2-添加键值对\" class=\"headerlink\" title=\"5.1.2 添加键值对\"></a>5.1.2 添加键值对</h4><p>做一个游戏，设置外星人的坐标。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">alien_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alien_0<span class=\"token punctuation\">)</span> \nalien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'x_position'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nalien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'y_position'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alien_0<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-1-3-修改字典中的值\"><a href=\"#5-1-3-修改字典中的值\" class=\"headerlink\" title=\"5.1.3 修改字典中的值\"></a>5.1.3 修改字典中的值</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">alien_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The alien is \"</span> <span class=\"token operator\">+</span> alien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\nalien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The alien is now \"</span> <span class=\"token operator\">+</span> alien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>中途修改外星人的颜色。</p>\n<h4 id=\"5-1-4-删除键值对\"><a href=\"#5-1-4-删除键值对\" class=\"headerlink\" title=\"5.1.4 删除键值对\"></a>5.1.4 删除键值对</h4><ul>\n<li>删除的键值对永远消失。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">alien_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">del</span> alien_0<span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-遍历字典\"><a href=\"#5-2-遍历字典\" class=\"headerlink\" title=\"5.2 遍历字典\"></a>5.2 遍历字典</h3><h4 id=\"5-2-1-遍历字典中的所有键值对\"><a href=\"#5-2-1-遍历字典中的所有键值对\" class=\"headerlink\" title=\"5.2.1 遍历字典中的所有键值对\"></a>5.2.1 遍历字典中的所有键值对</h4><p>不像遍历列表只用一个变量，遍历字典需要用两个变量。一个赋值key，一个赋值value。</p>\n<p>如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> user_0<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>items方法是字典中返回键值对的方法。</p>\n<h4 id=\"5-2-2-遍历字典中的所有键\"><a href=\"#5-2-2-遍历字典中的所有键\" class=\"headerlink\" title=\"5.2.2 遍历字典中的所有键\"></a>5.2.2 遍历字典中的所有键</h4><p><code>for name in favorite_languages.keys(): </code></p>\n<p>keys方法用于返回字典中的key.</p>\n<h4 id=\"5-2-3-按顺序遍历字典中的所有键\"><a href=\"#5-2-3-按顺序遍历字典中的所有键\" class=\"headerlink\" title=\"5.2.3 按顺序遍历字典中的所有键\"></a>5.2.3 按顺序遍历字典中的所有键</h4><p><code>for name in sorted(favorite_languages.keys()): </code></p>\n<h4 id=\"5-2-4-遍历列表中所有值\"><a href=\"#5-2-4-遍历列表中所有值\" class=\"headerlink\" title=\"5.2.4 遍历列表中所有值\"></a>5.2.4 遍历列表中所有值</h4><p><code> for language in favorite_languages.values():</code></p>\n<p>当数据很大时，如何剔除其中的重复值。要用到集合的方法。set()创建一个集合数据类型(无序，互异，确定）,集合是也是{}，空集合必须用set()</p>\n<p><code>for language in set(favorite_languages.values()): </code></p>\n<h3 id=\"5-3-嵌套\"><a href=\"#5-3-嵌套\" class=\"headerlink\" title=\"5.3 嵌套\"></a>5.3 嵌套</h3><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p>\n<h4 id=\"5-3-1-字典列表\"><a href=\"#5-3-1-字典列表\" class=\"headerlink\" title=\"5.3.1 字典列表\"></a>5.3.1 字典列表</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">alien_0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span>\nalien_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span>\nalien_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'points'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span>\naliens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>alien_0<span class=\"token punctuation\">,</span> alien_1<span class=\"token punctuation\">,</span> alien_2<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> alien <span class=\"token keyword\">in</span> aliens<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>alien<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述将三个不同外星人的数据存储在一个列表中。</p>\n<h4 id=\"5-3-2-在字典中储存列表\"><a href=\"#5-3-2-在字典中储存列表\" class=\"headerlink\" title=\"5.3.2 在字典中储存列表\"></a>5.3.2 在字典中储存列表</h4><p>如储存披萨信息:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pizza <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'crust'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'thick'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'toppings'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mushrooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extra cheese'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-3-3-在字典中储存字典\"><a href=\"#5-3-3-在字典中储存字典\" class=\"headerlink\" title=\"5.3.3 在字典中储存字典\"></a>5.3.3 在字典中储存字典</h4><p>如一个论坛中，存储一个用户的信息:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">users <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'aeinstein'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'first'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'albert'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'last'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'einstein'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'location'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'princeton'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mcurie'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'first'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'marie'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'last'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'curie'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'location'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'paris'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"六、用户输入和while循环\"><a href=\"#六、用户输入和while循环\" class=\"headerlink\" title=\"六、用户输入和while循环\"></a>六、用户输入和while循环</h2><p>通过获取用户输入并学会控制程序的运行时间，可编写出交互式程序。</p>\n<h3 id=\"6-1-函数input\"><a href=\"#6-1-函数input\" class=\"headerlink\" title=\"6.1 函数input()\"></a>6.1 函数input()</h3><p>函数input()能让程序暂停运行，等待用户输入一些文本。获取输入之后，将储存在一个变量中，方便使用.</p>\n<p>例：获取用户的姓名</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入你的姓名：\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的姓名是：\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()。这样，即便提示超过一行，input()语句也非常清晰。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">prompt <span class=\"token operator\">=</span> <span class=\"token string\">\"If you tell us who you are, we can personalize the messages you see.\"</span>\nprompt <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\nWhat is your first name? \"</span>\nname <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nHello, \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-1-1-使用int-获取输入的数字\"><a href=\"#6-1-1-使用int-获取输入的数字\" class=\"headerlink\" title=\"6.1.1 使用int()获取输入的数字\"></a>6.1.1 使用int()获取输入的数字</h4><p>使用input()输入数字时，python会将其认为是字符串，应手动将其类型改为数字类型。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How old are you? \"</span><span class=\"token punctuation\">)</span>\nHow old are you?<span class=\"token number\">21</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n<span class=\"token boolean\">True</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-1-2-求模运算符\"><a href=\"#6-1-2-求模运算符\" class=\"headerlink\" title=\"6.1.2 求模运算符%\"></a>6.1.2 求模运算符%</h4><p>求模运算符能指出两数相除的余数，可用于判断奇数、偶数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">number <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a number, and I'll tell you if it's even or odd: \"</span><span class=\"token punctuation\">)</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe number \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is even.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe number \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is odd.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-2-while循环\"><a href=\"#6-2-while循环\" class=\"headerlink\" title=\"6.2 while循环\"></a>6.2 while循环</h3><p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条件不满足为止。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">current_number <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> current_number <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>current_number<span class=\"token punctuation\">)</span>\n    current_number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述代码为简单计数器，直到计数到5才停止运行。</p>\n<h4 id=\"6-2-1-让用户选择何时退出\"><a href=\"#6-2-1-让用户选择何时退出\" class=\"headerlink\" title=\"6.2.1 让用户选择何时退出\"></a>6.2.1 让用户选择何时退出</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">prompt <span class=\"token operator\">=</span> <span class=\"token string\">\"\\nTell me something, and I will repeat it back to you:\"</span>\nprompt <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\nEnter 'quit' to end the program. \"</span>\nmessage <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">while</span> message <span class=\"token operator\">!=</span> <span class=\"token string\">'quit'</span><span class=\"token punctuation\">:</span>\n    message <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> message <span class=\"token operator\">!=</span> <span class=\"token string\">'quit'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当用户输入quit时退出while循环。</p>\n<h4 id=\"6-2-2-使用标志\"><a href=\"#6-2-2-使用标志\" class=\"headerlink\" title=\"6.2.2 使用标志\"></a>6.2.2 使用标志</h4><p>我们让程序在满足指定条件时就执行特定的任务。但在更复杂的程序中，很多不同的事件都会导致程序停止运行；在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于活动状态。这个变量被称为标志，充当了程序的交通信号灯。</p>\n<p>在上一个代码中我们加入一个标志名为active</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">prompt <span class=\"token operator\">=</span> <span class=\"token string\">\"\\nTell me something, and I will repeat it back to you:\"</span>\nprompt <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\nEnter 'quit' to end the program. \"</span>\nactive <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n<span class=\"token keyword\">while</span> active<span class=\"token punctuation\">:</span>\n    message <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> message <span class=\"token operator\">==</span> <span class=\"token string\">'quit'</span><span class=\"token punctuation\">:</span>\n    \tactive <span class=\"token operator\">=</span> Falese\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-2-3-使用break退出循环\"><a href=\"#6-2-3-使用break退出循环\" class=\"headerlink\" title=\"6.2.3 使用break退出循环\"></a>6.2.3 使用break退出循环</h4><p>要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">prompt <span class=\"token operator\">=</span> <span class=\"token string\">\"\\nPlease enter the name of a city you have visited:\"</span>\nprompt <span class=\"token operator\">+=</span> <span class=\"token string\">\"\\n(Enter 'quit' when you are finished.) \"</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    city <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>prompt<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> city <span class=\"token operator\">==</span> <span class=\"token string\">'quit'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'I d like to </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>city<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-2-4-在循环中使用continue\"><a href=\"#6-2-4-在循环中使用continue\" class=\"headerlink\" title=\"6.2.4 在循环中使用continue\"></a>6.2.4 在循环中使用continue</h4><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">current_number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> current_number <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n    current_number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> current_number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>current_number<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只打印1-10中的奇数，如果是偶数取余为0满足if条件执行continue返回循环不执行下面的语句。</p>\n<h2 id=\"七、函数\"><a href=\"#七、函数\" class=\"headerlink\" title=\"七、函数\"></a>七、函数</h2><p>函数是带名字的代码块，用于完成具体的工作。</p>\n<h3 id=\"7-1-定义函数\"><a href=\"#7-1-定义函数\" class=\"headerlink\" title=\"7.1 定义函数\"></a>7.1 定义函数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greet_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示简单的问候语\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n\n\ngreet_user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 上述为一个简单的函数,def 来定义一个函数,后跟函数名（）,函数内容为执行print语句。</p>\n<h4 id=\"7-1-1-向函数传递信息\"><a href=\"#7-1-1-向函数传递信息\" class=\"headerlink\" title=\"7.1.1 向函数传递信息\"></a>7.1.1 向函数传递信息</h4><p>只需稍作修改，就可以让函数greet_user()不仅向用户显示Hello!，还将用户的名字用作抬头。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greet_user</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示简单的问候语\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> username<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\n\n\ngreet_user<span class=\"token punctuation\">(</span><span class=\"token string\">'alex'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-1-2-实参和形参\"><a href=\"#7-1-2-实参和形参\" class=\"headerlink\" title=\"7.1.2 实参和形参\"></a>7.1.2 实参和形参</h4><p>上述greet_user()内username就是形参,而’alex’是实参。函数将实参’Alex’传递给了函数greet_user()，这个值被存储在形参username中。</p>\n<h3 id=\"7-2-传递实参\"><a href=\"#7-2-传递实参\" class=\"headerlink\" title=\"7.2 传递实参\"></a>7.2 传递实参</h3><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。下面来依次介绍这些方式。</p>\n<h4 id=\"7-2-1-位置实参\"><a href=\"#7-2-1-位置实参\" class=\"headerlink\" title=\"7.2.1 位置实参\"></a>7.2.1 位置实参</h4><p>最简单的关联实参和形参方式是基于实参的顺序。这种关联方式被称为位置实参。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">describe_animal</span><span class=\"token punctuation\">(</span>animal_type<span class=\"token punctuation\">,</span> animal_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示宠物的信息\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"I have a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"My </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'s name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n\ndescribe_animal<span class=\"token punctuation\">(</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xiaobai'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述代码将实参dog传给了形参animal_type,实参xiaobai传递给了形参animal_name.</p>\n<ul>\n<li>位置传参的顺序十分重要，不能颠倒顺序，需要一一对应。</li>\n</ul>\n<h4 id=\"7-2-2-关键字实参\"><a href=\"#7-2-2-关键字实参\" class=\"headerlink\" title=\"7.2.2 关键字实参\"></a>7.2.2 关键字实参</h4><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">describe_animal</span><span class=\"token punctuation\">(</span>animal_type<span class=\"token punctuation\">,</span> animal_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示宠物的信息\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"I have a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"My </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'s name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n\ndescribe_animal<span class=\"token punctuation\">(</span>animal_name<span class=\"token operator\">=</span><span class=\"token string\">'xiaobai'</span><span class=\"token punctuation\">,</span> animal_type<span class=\"token operator\">=</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-2-3-默认值\"><a href=\"#7-2-3-默认值\" class=\"headerlink\" title=\"7.2.3 默认值\"></a>7.2.3 默认值</h4><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p>\n<p>如果你发现调用describe_pet()时，描述的大都是小狗，就可将形参animal_type的默认值设置为’dog’。这样，调用describe_pet()来描述小狗时，就可不提供这种信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">describe_animal</span><span class=\"token punctuation\">(</span>animal_name<span class=\"token punctuation\">,</span> animal_type<span class=\"token operator\">=</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"显示宠物的信息\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"I have a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"My </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_type<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'s name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>animal_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n\ndescribe_animal<span class=\"token punctuation\">(</span><span class=\"token string\">'xiaobai'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>请注意，在这个函数的定义中，修改了形参的排列顺序。由于给animal_type指定了默认值，无需通过实参来指定动物类型，因此在函数调用中只包含一个实参——宠物的名字。然而，Python依然将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，这个实参将关联到函数定义中的第一个形参。这就是需要将pet_name放在形参列表开头的原因所在。</p>\n<h3 id=\"7-3-返回值\"><a href=\"#7-3-返回值\" class=\"headerlink\" title=\"7.3 返回值\"></a>7.3 返回值</h3><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p>\n<h4 id=\"7-3-1-返回简单值\"><a href=\"#7-3-1-返回简单值\" class=\"headerlink\" title=\"7.3.1 返回简单值\"></a>7.3.1 返回简单值</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_formatted_name</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的姓名\"\"\"</span>\n    full_name <span class=\"token operator\">=</span> first_name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> last_name\n    <span class=\"token keyword\">return</span> full_name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nmusician <span class=\"token operator\">=</span> get_formatted_name<span class=\"token punctuation\">(</span><span class=\"token string\">'jimi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hendrix'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>musician<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-3-2-让实参变为可选的的\"><a href=\"#7-3-2-让实参变为可选的的\" class=\"headerlink\" title=\"7.3.2 让实参变为可选的的\"></a>7.3.2 让实参变为可选的的</h4><p>有时候，需要让实参变成可选的，这样使用函数的人就只需在必要时才提供额外的信息。可使用默认值来让实参变成可选的。\t</p>\n<p>同时提供名、中间名和姓，并非所有的人都有中间名，但如果你调用这个函数时只提供了名和姓，它将不能正确地运行。为让中间名变成可选的，可给实参middle_name指定一个默认值——空字符串，并在用户没有提供中间名时不使用这个实参。为让get_formatted_name()在没有提供中间名时依然可行，可给实参middle_name指定一个默认值——空字符串，并将其移到形参列表的末尾：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_formatted_name</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> middle_name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的姓名\"\"\"</span>\n    <span class=\"token keyword\">if</span> middle_name<span class=\"token punctuation\">:</span>\n        full_name <span class=\"token operator\">=</span> first_name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> middle_name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> last_name\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        full_name <span class=\"token operator\">=</span> first_name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> last_name\n    <span class=\"token keyword\">return</span> full_name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nmusician <span class=\"token operator\">=</span> get_formatted_name<span class=\"token punctuation\">(</span><span class=\"token string\">'jimi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hendrix'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>musician<span class=\"token punctuation\">)</span>\nmusician <span class=\"token operator\">=</span> get_formatted_name<span class=\"token punctuation\">(</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hooker'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lee'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>musician<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-3-3-返回一个字典\"><a href=\"#7-3-3-返回一个字典\" class=\"headerlink\" title=\"7.3.3 返回一个字典\"></a>7.3.3 返回一个字典</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">build_person</span><span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"返回一个字典，其中包含有关一个人的信息\"\"\"</span>\n    person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">:</span> first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'last'</span><span class=\"token punctuation\">:</span> last_name<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> age<span class=\"token punctuation\">:</span>\n        person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> age\n    <span class=\"token keyword\">return</span> person\n\n\nmusician <span class=\"token operator\">=</span> build_person<span class=\"token punctuation\">(</span><span class=\"token string\">'jimi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hendrix'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token string\">'27'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>musician<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>函数定义中，我们新增了一个可选形参age，并将其默认值设置为空字符串。如果函数调用中包含这个形参的值，这个值将存储到字典中。在任何情况下，这个函数都会存储人的姓名，但可对其进行修改，使其也存储有关人的其他信息.</p>\n<h3 id=\"7-4-传递列表\"><a href=\"#7-4-传递列表\" class=\"headerlink\" title=\"7.4 传递列表\"></a>7.4 传递列表</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">greet_users</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"向列表中的每位用户都发出简单的问候\"\"\"</span>\n    <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n\n\nusernames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hannah'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ty'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'margot'</span><span class=\"token punctuation\">]</span>\ngreet_users<span class=\"token punctuation\">(</span>usernames<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-5-传递任意数量的形参\"><a href=\"#7-5-传递任意数量的形参\" class=\"headerlink\" title=\"7.5 传递任意数量的形参\"></a>7.5 传递任意数量的形参</h3><p>​\t有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_pizza</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>toppings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"打印顾客点的所有配料\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>toppings<span class=\"token punctuation\">)</span>\n\n\nmake_pizza<span class=\"token punctuation\">(</span><span class=\"token string\">'pepperoni'</span><span class=\"token punctuation\">)</span>\nmake_pizza<span class=\"token punctuation\">(</span><span class=\"token string\">'mushrooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green peppers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extra cheese'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。函数体内的print语句通过生成输出来证明Python能够处理使用一个值调用函数的情形，也能处理使用三个值来调用函数的情形。它以类似的方式处理不同的调用，注意，Python将实参封装到一个元组中，即便函数只收到一个值也如此</p>\n<h4 id=\"7-5-1-结合使用位置实参和任意数量的实参\"><a href=\"#7-5-1-结合使用位置实参和任意数量的实参\" class=\"headerlink\" title=\"7.5.1 结合使用位置实参和任意数量的实参\"></a>7.5.1 结合使用位置实参和任意数量的实参</h4><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_pizza</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>toppings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"概述要制作的比萨\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaking a \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"-inch pizza with the following toppings:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> topping <span class=\"token keyword\">in</span> toppings<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"- \"</span> <span class=\"token operator\">+</span> topping<span class=\"token punctuation\">)</span>\n\n\nmake_pizza<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pepperoni'</span><span class=\"token punctuation\">)</span>\nmake_pizza<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mushrooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green peppers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extra cheese'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"7-5-2-使用任意数量的关键字实参\"><a href=\"#7-5-2-使用任意数量的关键字实参\" class=\"headerlink\" title=\"7.5.2 使用任意数量的关键字实参\"></a>7.5.2 使用任意数量的关键字实参</h4><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。一个这样的示例是创建用户简介：你知道你将收到有关用户的信息，但不确定会是什么样的信息。在下面的示例中，函数build_profile()接受名和姓，同时还接受任意数量的关键字实参：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">build_profile</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>user_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"创建一个字典，其中包含我们知道的有关用户的一切\"\"\"</span>\n    profile <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">:</span> first<span class=\"token punctuation\">,</span> <span class=\"token string\">'last_name'</span><span class=\"token punctuation\">:</span> last<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> user_info<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        profile<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n    <span class=\"token keyword\">return</span> profile\n\n\nuser_profile <span class=\"token operator\">=</span> build_profile<span class=\"token punctuation\">(</span><span class=\"token string\">'albert'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'einstein'</span><span class=\"token punctuation\">,</span>\n                             location<span class=\"token operator\">=</span><span class=\"token string\">'princeton'</span><span class=\"token punctuation\">,</span>\n                             field<span class=\"token operator\">=</span><span class=\"token string\">'physics'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>user_profile<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>形参**user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称—值对都封装到这个字典中。在这个函数中，可以像访问其他字典那样访问user_info中的名称—值对。</p>\n<h3 id=\"7-6-将函数存储在模块中\"><a href=\"#7-6-将函数存储在模块中\" class=\"headerlink\" title=\"7.6 将函数存储在模块中\"></a>7.6 将函数存储在模块中</h3><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码。通过将函数存储在独立的文件中，可隐藏程序代码的细节，将重点放在程序的高层逻辑上。这还能让你在众多不同的程序中重用函数。将函数存储在独立文件中后，可与其他程序员共享这些文件而不是整个程序。知道如何导入函数还能让你使用其他程序员编写的函数库。</p>\n<h4 id=\"7-6-1-导入整个模块\"><a href=\"#7-6-1-导入整个模块\" class=\"headerlink\" title=\"7.6.1 导入整个模块\"></a>7.6.1 导入整个模块</h4><p>将整个函数单独存为一个文件。</p>\n<ul>\n<li>pizza.py</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_pizza</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>toppings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token triple-quoted-string string\">\"\"\"概述要制作的比萨\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nMaking a \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">\"-inch pizza with the following toppings:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> topping <span class=\"token keyword\">in</span> toppings<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"- \"</span> <span class=\"token operator\">+</span> topping<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>making_pizzas.py</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pizza\npizza<span class=\"token punctuation\">.</span>make_pizza<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pepperoni'</span><span class=\"token punctuation\">)</span>\npizza<span class=\"token punctuation\">.</span>make_pizza<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mushrooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green peppers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'extra cheese'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>Python读取这个文件时，代码行import pizza让Python打开文件pizza.py，并将其中的所有函数都复制到这个程序中。你看不到复制的代码，因为这个程序运行时，Python在幕后复制这些代码。你只需知道，在making_pizzas.py中，可以使用pizza.py中定义的所有函数。</p>\n<p>这就是一种导入方法：只需编写一条import语句并在其中指定模块名，就可在程序中使用该模块中的所有函数。如果你使用这种import语句导入了名为module_name.py的整个模块，就可使用下面的语法来使用其中任何一个函数：</p>\n<p><code>module_name.function_name()</code></p>\n<h4 id=\"7-6-2-导入特定的函数\"><a href=\"#7-6-2-导入特定的函数\" class=\"headerlink\" title=\"7.6.2 导入特定的函数\"></a>7.6.2 导入特定的函数</h4><p>你还可以导入模块中的特定函数，这种导入方法的语法如下：</p>\n<p><code>from module_name import function_name</code></p>\n<p><code>from module_name import function_0, function_1, function_2</code></p>\n<h4 id=\"7-6-3-使用as给函数、模块指定别名\"><a href=\"#7-6-3-使用as给函数、模块指定别名\" class=\"headerlink\" title=\"7.6.3 使用as给函数、模块指定别名\"></a>7.6.3 使用as给函数、模块指定别名</h4><p><code>from pizza import make_pizza as mp</code></p>\n<p><code>import numpy as np</code></p>\n<h4 id=\"7-6-4-导入模块中所有函数\"><a href=\"#7-6-4-导入模块中所有函数\" class=\"headerlink\" title=\"7.6.4 导入模块中所有函数\"></a>7.6.4 导入模块中所有函数</h4><p>使用星号（*）运算符可让Python导入模块中的所有函数：</p>\n<p>import语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。由于导入了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。然而，使用并非自己编写的大型模块时，最好不要采用这种导入方法：如果模块中有函数的名称与你的项目中使用的名称相同，可能导致意想不到的结果：Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数。最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法。这能让代码更清晰，更容易阅读和理解。这里之所以介绍这种导入方法，只是想让你在阅读别人编写的代码时，如果遇到类似于下面的import语句，能够理解它们：</p>\n<p><code>from module_name import * </code></p>\n<h3 id=\"7-7-函数编写指南\"><a href=\"#7-7-函数编写指南\" class=\"headerlink\" title=\"7.7 函数编写指南\"></a>7.7 函数编写指南</h3><p>编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定。每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它：他们完全可以相信代码如描述的那样运行；只要知道函数的名称、需要的实参以及返回值的类型，就能在自己的程序中使用它。</p>\n<h3 id=\"7-8-打包程序\"><a href=\"#7-8-打包程序\" class=\"headerlink\" title=\"7.8 打包程序\"></a>7.8 打包程序</h3><h2 id=\"八、类\"><a href=\"#八、类\" class=\"headerlink\" title=\"八、类\"></a>八、类</h2><p>面向对象编程是最有效的软件编写方法之一。在面向对象编程中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。编写类时，你定义一大类对象都有的通用行为。基于类创建对象时，每个对象都自动具备这种通用行为，然后可根据需要赋予每个对象独特的个性。使用面向对象编程可模拟现实情景，其逼真程度达到了令你惊讶的地步。</p>\n<h3 id=\"8-1-创建和使用类\"><a href=\"#8-1-创建和使用类\" class=\"headerlink\" title=\"8.1 创建和使用类\"></a>8.1 创建和使用类</h3><p>编写个表示小狗的简单类Dog——它表示的不是特定的小狗，而是任何小狗。大多数狗都有年龄和名字信息，蹲下和打滚两种行为。</p>\n<h4 id=\"8-1-1-创建Dog类\"><a href=\"#8-1-1-创建Dog类\" class=\"headerlink\" title=\"8.1.1 创建Dog类\"></a>8.1.1 创建Dog类</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟小狗的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\"初始化属性name和age\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令时蹲下\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" is now sitting.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">roll_over</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令是打滚\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" rolled over!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>class用于定义类,而类的名字规定首字母大写。</p>\n<ul>\n<li>方法 <code>__init__</code><br>类中的函数称为方法；你前面学到的有关函数的一切都适用于方法，就目前而言，唯一重要的差别是调用方法的方式。</li>\n</ul>\n<p><code>__init__()</code>是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。在这个方法的名称中，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突。</p>\n<p>我们将方法<code>__init__()</code>定义成了包含三个形参：self、name和age。形参self必不可少，必须位于其他形参的前面。当调用此方法创建Dog实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。每当我们根据Dog类创建实例时，都只需给最后两个形参（name和age）提供值。</p>\n<p>以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量。self.name &#x3D; name获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例。self.age &#x3D; age的作用与此类似。</p>\n<p>Dog类还定义了另外两个方法：sit()和roll_over()（见）。由于这些方法不需要额外的信息，如名字或年龄，因此它们只有一个形参self。</p>\n<h4 id=\"8-1-2-根据类创建实例\"><a href=\"#8-1-2-根据类创建实例\" class=\"headerlink\" title=\"8.1.2 根据类创建实例\"></a>8.1.2 根据类创建实例</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟小狗的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\"初始化属性name和age\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令时蹲下\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is now sitting.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">roll_over</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令是打滚\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" rolled over!\"</span><span class=\"token punctuation\">)</span>\n\n\nmy_dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">'willie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My dog's name is \"</span> <span class=\"token operator\">+</span> my_dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My dog is \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>my_dog<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span>\nmy_dog<span class=\"token punctuation\">.</span>sit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmy_dog<span class=\"token punctuation\">.</span>roll_over<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Python使用实参’willie’和6调用Dog类中的方法<code>__init__()</code>。方法<code>__init__()</code>创建一个表示特定小狗的示例，并使用我们提供的值来设置属性name和age。方法<code>__init__()</code>并未显式地包含return语句，但Python自动返回一个表示这条小狗的实例。我们将这个实例存储在变量my_dog中。在这里，命名约定很有用：我们通常可以认为首字母大写的名称（如Dog）指的是类，而小写的名称（如my_dog）指的是根据类创建的实例。</p>\n<ul>\n<li>创建多个实例</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟小狗的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\"初始化属性name和age\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令时蹲下\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is now sitting.\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">roll_over</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"模拟小狗被命令是打滚\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" rolled over!\"</span><span class=\"token punctuation\">)</span>\n\n\nmy_dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">'willie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nyour_dog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">'lucy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My dog's name is \"</span> <span class=\"token operator\">+</span> my_dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My dog is \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>my_dog<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span>\nmy_dog<span class=\"token punctuation\">.</span>sit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your dog's name is \"</span> <span class=\"token operator\">+</span> your_dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your dog is \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>your_dog<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" years old\"</span><span class=\"token punctuation\">)</span>\nyour_dog<span class=\"token punctuation\">.</span>roll_over<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-2-使用类和实例\"><a href=\"#8-2-使用类和实例\" class=\"headerlink\" title=\"8.2 使用类和实例\"></a>8.2 使用类和实例</h3><h4 id=\"8-2-1-Car类\"><a href=\"#8-2-1-Car类\" class=\"headerlink\" title=\"8.2.1 Car类\"></a>8.2.1 Car类</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟汽车的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始化描述汽车的属性\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_descriptive_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的描述性信息\"\"\"</span>\n        long_name <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>make<span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>model\n        <span class=\"token keyword\">return</span> long_name\n\n\nmy_new_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A8L'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_new_car<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为让这个类更有趣，下面给它添加一个随时间变化的属性，它存储汽车的总里程。</p>\n<h4 id=\"8-2-2-给属性指定默认值\"><a href=\"#8-2-2-给属性指定默认值\" class=\"headerlink\" title=\"8.2.2 给属性指定默认值\"></a>8.2.2 给属性指定默认值</h4><p>​\t类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。在有些情况下，如设置默认值时，在方法__init__()内指定这种初始值是可行的；如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</p>\n<p>下面来添加一个名为odometer_reading的属性，其初始值总是为0。我们还添加了一个名为read_odometer()的方法，用于读取汽车的里程表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟汽车的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始化描述汽车的属性\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year\n        self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_descriptive_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的描述性信息\"\"\"</span>\n        long_name <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>make<span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>model\n        <span class=\"token keyword\">return</span> long_name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"打印一条指出汽车里程的信息\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"This car has </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> miles on it.\"</span></span><span class=\"token punctuation\">)</span>\n\n\nmy_new_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'Audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A8L'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_new_car<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmy_new_car<span class=\"token punctuation\">.</span>read_odometer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8-2-3-修改属性的值\"><a href=\"#8-2-3-修改属性的值\" class=\"headerlink\" title=\"8.2.3 修改属性的值\"></a>8.2.3 修改属性的值</h4><ol>\n<li>直接修改属性的值</li>\n</ol>\n<p>要修改汽车的里程为23</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">my_new_car<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\nmy_new_car<span class=\"token punctuation\">.</span>read_odometer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>​\t2.通过方法修改属性的值</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mileage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token triple-quoted-string string\">\"\"\"将里程表读数设置为指定的值\"\"\"</span>\n\tself<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> mileage\n    \n my_new_car<span class=\"token punctuation\">.</span>update_odometer<span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\nmy_new_car<span class=\"token punctuation\">.</span>read_odometer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可对方法update_odometer()进行扩展，使其在修改里程表读数时做些额外的工作。下面来添加一些逻辑，禁止任何人将里程表读数往回调：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">update_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mileage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       <span class=\"token triple-quoted-string string\">\"\"\" 将里程表读数设置为指定的值\n           禁止将里程表读数往回调\n       \"\"\"</span>\n       <span class=\"token keyword\">if</span> mileage <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">:</span>\n           self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> mileage\n       <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can't roll back an odometer!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-3-继承\"><a href=\"#8-3-继承\" class=\"headerlink\" title=\"8.3 继承\"></a>8.3 继承</h3><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p>\n<h4 id=\"8-3-1-子类的方法-init\"><a href=\"#8-3-1-子类的方法-init\" class=\"headerlink\" title=\"8.3.1 子类的方法__init__()\"></a>8.3.1 子类的方法<code>__init__()</code></h4><p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方法<code>__init__()</code>需要父类施以援手。模拟电动汽车。电动汽车是一种特殊的汽车，因此我们可以在前面创建的Car类的基础上创建新类ElectricCar，这样我们就只需为电动汽车特有的属性和行为编写代码。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟汽车的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始化描述汽车的属性\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year\n        self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_descriptive_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的描述性信息\"\"\"</span>\n        long_name <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>make<span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>model\n        <span class=\"token keyword\">return</span> long_name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"打印一条指出汽车里程的信息\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"This car has </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> miles on it.\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mileage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" 将里程表读数设置为指定的值\n            禁止将里程表读数往回调\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> mileage <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> mileage\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can't roll back an odometer!\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">increment_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> miles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"增加里程表的值\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">+=</span> miles\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ElectricCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"电动汽车的独特之处\"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始父类的属性\"\"\"</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span>\n\n\nmy_tesla <span class=\"token operator\">=</span> ElectricCar<span class=\"token punctuation\">(</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model s'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_tesla<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>super()是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性。父类也称为超类（superclass），名称super因此而得名。</p>\n<h4 id=\"8-3-2-给子类定义属性和方法\"><a href=\"#8-3-2-给子类定义属性和方法\" class=\"headerlink\" title=\"8.3.2 给子类定义属性和方法\"></a>8.3.2 给子类定义属性和方法</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ElectricCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"电动汽车的独特之处\n       初始化父类的属性，再初始化电动车的属性\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始父类的属性\"\"\"</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>battery_size <span class=\"token operator\">=</span> <span class=\"token number\">70</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">describe_battery</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"打印一条描述电瓶容量的信息\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"This car has  a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>battery_size<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">-kwh battery.\"</span></span><span class=\"token punctuation\">)</span>\n\n\nmy_tesla <span class=\"token operator\">=</span> ElectricCar<span class=\"token punctuation\">(</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'model s'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_tesla<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmy_tesla<span class=\"token punctuation\">.</span>describe_battery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8-3-4-重写父类的方法\"><a href=\"#8-3-4-重写父类的方法\" class=\"headerlink\" title=\"8.3.4 重写父类的方法\"></a>8.3.4 重写父类的方法</h4><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ElectricCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>snip<span class=\"token operator\">-</span><span class=\"token operator\">-</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">fill_gas_tank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"电动汽车没有油箱\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This car doesn't need a gas tank!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用继承时，可让子类保留从父类那里继承而来的精华，并剔除不需要的糟粕。</p>\n<h4 id=\"8-3-4-将实例用作属性\"><a href=\"#8-3-4-将实例用作属性\" class=\"headerlink\" title=\"8.3.4 将实例用作属性\"></a>8.3.4 将实例用作属性</h4><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多：属性和方法清单以及文件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大型类拆分成多个协同工作的小类。</p>\n<p>不断给ElectricCar类添加细节时，我们可能会发现其中包含很多专门针对汽车电瓶的属性和方法。在这种情况下，我们可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n<span class=\"token operator\">-</span><span class=\"token operator\">-</span>snip<span class=\"token operator\">-</span><span class=\"token operator\">-</span> \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Battery</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟电动车电瓶的尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> battery_size<span class=\"token operator\">=</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始化电瓶的属性\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>battery_size <span class=\"token operator\">=</span> battery_size\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">describe_battery</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"打印一条电瓶容量的信息\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"This car has a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>battery_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">-kwh battery.\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ElectricCar</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"电动汽车的独特之处\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        初始化父类的属性，再初始化电瓶车特有的属性\n        \"\"\"</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>battery <span class=\"token operator\">=</span> Battery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nmy_tesla <span class=\"token operator\">=</span> ElectricCar<span class=\"token punctuation\">(</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'model s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_tesla<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmy_tesla<span class=\"token punctuation\">.</span>battery<span class=\"token punctuation\">.</span>describe_battery<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在ElectricCar类中，我们添加了一个名为self.battery的属性。这行代码让Python创建一个新的Battery实例（由于没有指定尺寸，因此为默认值70），并将该实例存储在属性self.battery中。每当方法__init__()被调用时，都将执行该操作；因此现在每个ElectricCar实例都包含一个自动创建的Battery实例。</p>\n<h3 id=\"8-4-导入类\"><a href=\"#8-4-导入类\" class=\"headerlink\" title=\"8.4 导入类\"></a>8.4 导入类</h3><p>随着你不断地给类添加功能，文件可能变得很长，即便你妥善地使用了继承亦如此。为遵循Python的总体理念，应让文件尽可能整洁。为在这方面提供帮助，Python允许你将类存储在模块中，然后在主程序中导入所需的模块。</p>\n<h4 id=\"8-4-1-导入单个类\"><a href=\"#8-4-1-导入单个类\" class=\"headerlink\" title=\"8.4.1 导入单个类\"></a>8.4.1 导入单个类</h4><p>创建单个文件car.py用来储存Car类，然后创建my_car来导入Car类;</p>\n<p><code>car.py</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"一个可用于表示汽车的类\"\"\"</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"一次模拟汽车的简单尝试\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"初始化描述汽车的属性\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>make <span class=\"token operator\">=</span> make\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year\n        self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_descriptive_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"返回整洁的描述性信息\"\"\"</span>\n        long_name <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>make<span class=\"token operator\">+</span><span class=\"token string\">' '</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>model\n        <span class=\"token keyword\">return</span> long_name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"打印一条指出汽车里程的信息\"\"\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"This car has </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> miles on it.\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mileage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" 将里程表读数设置为指定的值\n            禁止将里程表读数往回调\n        \"\"\"</span>\n        <span class=\"token keyword\">if</span> mileage <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>odometer_reading<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> mileage\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can't roll back an odometer!\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">increment_odometer</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> miles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">+=</span> miles\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们包含了一个模块级文档字符串，对该模块的内容做了简要的描述。你应为自己创建的每个模块都编写文档字符串</p>\n<p><code>my_car.py</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> car <span class=\"token keyword\">import</span> Car\n\nmy_new_car <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'audi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2022'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_new_car<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmy_new_car<span class=\"token punctuation\">.</span>odometer_reading <span class=\"token operator\">=</span> <span class=\"token number\">23</span>\nmy_new_car<span class=\"token punctuation\">.</span>read_odometer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>导入类是一种有效的编程方式。如果在这个程序中包含了整个Car类，它该有多长呀！通过将这个类移到一个模块中，并导入该模块，你依然可以使用其所有功能，但主程序文件变得整洁而易于阅读了。这还能让你将大部分逻辑存储在独立的文件中；确定类像你希望的那样工作后，你就可以不管这些文件，而专注于主程序的高级逻辑了。</p>\n<h4 id=\"8-4-2-导入多个类\"><a href=\"#8-4-2-导入多个类\" class=\"headerlink\" title=\"8.4.2 导入多个类\"></a>8.4.2 导入多个类</h4><p>可根据需要在程序文件中导入任意数量的类。如果我们要在同一个程序中创建普通汽车和电动汽车，就需要将Car和ElectricCar类都导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> car <span class=\"token keyword\">import</span> Car<span class=\"token punctuation\">,</span> ElectricCar\n\nmy_beetle <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">'volkswagen'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beetle'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_beetle<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmy_tesla <span class=\"token operator\">=</span> ElectricCar<span class=\"token punctuation\">(</span><span class=\"token string\">'tesla'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'roadster'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_tesla<span class=\"token punctuation\">.</span>get_descriptive_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8-4-3-导入整个模块\"><a href=\"#8-4-3-导入整个模块\" class=\"headerlink\" title=\"8.4.3 导入整个模块\"></a>8.4.3 导入整个模块</h4><p><code>import car</code></p>\n<h4 id=\"8-4-4-导入模块中所有类\"><a href=\"#8-4-4-导入模块中所有类\" class=\"headerlink\" title=\"8.4.4 导入模块中所有类\"></a>8.4.4 导入模块中所有类</h4><p><code>from module_name import * </code></p>\n<p>不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的import语句，就能清楚地知道程序使用了哪些类，将大有裨益；但这种导入方式没有明确地指出你使用了模块中的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导入方式，是因为虽然不推荐使用这种方式，但你可能会在别人编写的代码中见到它。</p>\n<h2 id=\"九、文件和异常\"><a href=\"#九、文件和异常\" class=\"headerlink\" title=\"九、文件和异常\"></a>九、文件和异常</h2><h3 id=\"9-1-文件基本操作\"><a href=\"#9-1-文件基本操作\" class=\"headerlink\" title=\"9.1 文件基本操作\"></a>9.1 文件基本操作</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f<span class=\"token operator\">=</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#打开文件</span>\nf<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#写操作</span>\nf<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#读操作(读取所有),鼠标光标停留在最后</span>\nf<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#读一行，光标停留在改行结尾</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#保存并关闭</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_name<span class=\"token punctuation\">:</span>\t<span class=\"token comment\">#只在使用的时候打开，不用自动关闭</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"9-1-1-文件打开模式\"><a href=\"#9-1-1-文件打开模式\" class=\"headerlink\" title=\"9.1.1 文件打开模式\"></a>9.1.1 文件打开模式</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">r <span class=\"token comment\">#只读模式</span>\nw <span class=\"token comment\">#创建模式，若已存在，则覆盖旧文件</span>\na <span class=\"token comment\">#追加模式，新数据加写到文件末尾</span>\nw<span class=\"token operator\">+</span> \t<span class=\"token comment\">#写读模式，写一段内容，再将其读取出来</span>\nr<span class=\"token operator\">+</span>\t<span class=\"token comment\">#读写模式，能读能写，但都是写在文件最后，跟追加一样</span>\na<span class=\"token operator\">+</span>\t<span class=\"token comment\">#追加读，一打开光标就在文件尾部</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-2遍历文件\"><a href=\"#9-2遍历文件\" class=\"headerlink\" title=\"9.2遍历文件\"></a>9.2遍历文件</h3><p>利用循环，遍历文件内容。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">filename <span class=\"token operator\">=</span> <span class=\"token string\">'data.txt'</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_object<span class=\"token punctuation\">:</span>\n    lines <span class=\"token operator\">=</span> file_object<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"9-2-1-将遍历内容存入列表\"><a href=\"#9-2-1-将遍历内容存入列表\" class=\"headerlink\" title=\"9.2.1 将遍历内容存入列表\"></a>9.2.1 将遍历内容存入列表</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"9-2-3-二进制操作文件\"><a href=\"#9-2-3-二进制操作文件\" class=\"headerlink\" title=\"9.2.3 二进制操作文件\"></a>9.2.3 二进制操作文件</h4><p>当要打开的文件为图片(视频)时，打开方式的encoding二进制模式（默认为utf-8)</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">rb\t<span class=\"token comment\">#二进制只读</span>\nwb\t<span class=\"token comment\">#二进制创建模式，若文件已存在则覆盖</span>\nab\t<span class=\"token comment\">#二进制追加，新数据写到文件末尾</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-3-其他功能\"><a href=\"#9-3-其他功能\" class=\"headerlink\" title=\"9.3 其他功能\"></a>9.3 其他功能</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">f<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#移动光标，按字节大小分。(中文utf-8三个字节，jbk两个字节)</span>\nf<span class=\"token punctuation\">.</span>tell<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#返回光标当前位置</span>\nf<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#强制将内存的buffer刷到硬盘</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-4-异常处理\"><a href=\"#9-4-异常处理\" class=\"headerlink\" title=\"9.4 异常处理\"></a>9.4 异常处理</h3><p>​\tPython使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。</p>\n<h4 id=\"9-4-1-try-expect代码块\"><a href=\"#9-4-1-try-expect代码块\" class=\"headerlink\" title=\"9.4.1 try-expect代码块\"></a>9.4.1 try-expect代码块</h4><p>当你认为可能发生了错误时，可编写一个try-except代码块来处理可能引发的异常。你让Python尝试运行一些代码，并告诉它如果这些代码引发了指定的异常，该怎么办。在数学中0不能放在分母，同样在python中会报错ZeroDivisionError</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ZeroDivisionError<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can't divide by zero!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们将导致错误的代码行print(5&#x2F;0)放在了一个try代码块中。如果try代码块中的代码运行起来没有问题，Python将跳过except代码块；如果try代码块中的代码导致了错误，Python将查找这样的except代码块，并运行其中的代码，即其中指定的错误与引发的错误相同。</p>\n<h3 id=\"9-5-存储数据\"><a href=\"#9-5-存储数据\" class=\"headerlink\" title=\"9.5 存储数据\"></a>9.5 存储数据</h3><p>  JSON（JavaScript Object Notation）格式最初是为JavaScript开发的，但随后成了一种常见格式，被包括Python在内的众多语言采用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\njson<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#用来写入</span>\njson<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#用于读取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">\"username.json\"</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username.json\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f_obj<span class=\"token punctuation\">:</span>\n        username <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f_obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> FileNotFoundError<span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whats your name\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username.json\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f_obj<span class=\"token punctuation\">:</span>\n        json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>f_obj<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"we will remember you when you come back </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"welcome back,</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>username<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"Python3入门Author:XXXWANG Date:2022&#x2F;6&#x2F;1 参考资料：Python Crash Course by Eric Matthes 一、变量和简单数据类型1.1 变量 内存比作一个仓库 变量，用于在内存中存放数据的容器 变量名比作货物...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"}],"tags":[{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python3%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">Python3入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">一、变量和简单数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.1 变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-1-%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99\"><span class=\"toc-text\">1.1.1 变量定义规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-2-%E5%8F%98%E9%87%8F%E7%9A%84%E4%BF%AE%E6%94%B9%E4%B8%8E%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">1.1.2  变量的修改与删除</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">1.2 字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99\"><span class=\"toc-text\">1.2.1 使用方法修改字符串的大小写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-%E5%90%88%E5%B9%B6%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">1.2.2 合并字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-%E5%88%B6%E8%A1%A8%E7%AC%A6%E6%88%96%E6%8D%A2%E8%A1%8C%E7%AC%A6%E6%B7%BB%E5%8A%A0%E7%A9%BA%E7%99%BD\"><span class=\"toc-text\">1.2.3 制表符或换行符添加空白</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-4-%E5%88%A0%E9%99%A4%E7%A9%BA%E7%99%BD\"><span class=\"toc-text\">1.2.4 删除空白</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">1.2.5 字符串的格式化输出</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">1.3 数字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-1-%E6%95%B4%E6%95%B0\"><span class=\"toc-text\">1.3.1 整数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-2-%E6%B5%AE%E7%82%B9%E6%95%B0\"><span class=\"toc-text\">1.3.2 浮点数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-3-3-%E4%BD%BF%E7%94%A8str-%E5%87%BD%E6%95%B0%E9%81%BF%E5%85%8D%E7%B1%BB%E5%9E%8B%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">1.3.3 使用str()函数避免类型错误</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.4 注释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-4-1-%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.4.1 如何编写注释</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-2-%E8%AF%A5%E7%BC%96%E5%86%99%E6%80%8E%E6%A0%B7%E7%9A%84%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">1.4.2 该编写怎样的注释</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-3-Python%E4%B9%8B%E7%A6%85\"><span class=\"toc-text\">1.4.3 Python之禅</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-%E5%88%97%E8%A1%A8%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">二、 列表介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%88%97%E8%A1%A8%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">2.1 列表是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.1.1 访问列表元素</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E4%BF%AE%E6%94%B9%E3%80%81%E6%B7%BB%E5%8A%A0%E3%80%81%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2 修改、添加、和删除元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-1-%E4%BF%AE%E6%94%B9%E5%88%97%E8%A1%A8%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2.1 修改列表元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-2-%E5%88%97%E8%A1%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2.2 列表中添加元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-3-%E4%BB%8E%E5%88%97%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">2.2.3 从列表中删除元素</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%84%E7%BB%87%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">2.3 组织列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-1-%E4%BD%BF%E7%94%A8sort-%E5%AF%B9%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%B0%B8%E4%B9%85%E6%80%A7%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">2.3.1 使用sort()对列表进行永久性排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-2-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0sorted-%E5%AF%B9%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E4%B8%B4%E6%97%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">2.3.2 使用函数sorted()对列表进行临时排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-3-%E5%80%92%E7%9D%80%E6%89%93%E5%8D%B0%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">2.3.3 倒着打印列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-4-%E7%A1%AE%E5%AE%9A%E5%88%97%E8%A1%A8%E7%9A%84%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">2.3.4 确定列表的长度</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">三、操作列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1%E9%81%8D%E5%8E%86%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.1遍历列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E9%81%BF%E5%85%8D%E7%BC%A9%E8%BF%9B%E9%94%99%E8%AF%AF\"><span class=\"toc-text\">3.2 避免缩进错误</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%88%9B%E5%BB%BA%E6%95%B0%E5%80%BC%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.3 创建数值列表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-1-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0range\"><span class=\"toc-text\">3.3.1 使用函数range()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-2-%E4%BD%BF%E7%94%A8range-%E5%88%9B%E5%BB%BA%E6%95%B0%E5%80%BC%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.3.2 使用range()创建数值列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-3-%E5%AF%B9%E6%95%B0%E5%AD%97%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E7%BB%9F%E8%AE%A1%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">3.3.3 对数字列表进行统计运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-4-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">3.3.4 列表解析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86\"><span class=\"toc-text\">3.4 使用列表的一部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-1-%E5%88%87%E7%89%87\"><span class=\"toc-text\">3.4.1 切片</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-2-%E9%81%8D%E5%8E%86%E5%88%87%E7%89%87\"><span class=\"toc-text\">3.4.2 遍历切片</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-3-%E5%A4%8D%E5%88%B6%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">3.4.3 复制列表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-%E5%85%83%E7%BB%84\"><span class=\"toc-text\">3.5 元组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-1-%E5%AE%9A%E4%B9%89%E5%85%83%E7%BB%84\"><span class=\"toc-text\">3.5.1 定义元组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-5-2-%E4%BF%AE%E6%94%B9%E5%85%83%E7%BB%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.5.2 修改元组变量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">3.6 设置代码格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-1-%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">3.6.1 格式设置指南</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-2-%E7%BC%A9%E8%BF%9B\"><span class=\"toc-text\">3.6.2 缩进</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-3-%E8%A1%8C%E9%95%BF\"><span class=\"toc-text\">3.6.3 行长</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-6-4-%E7%A9%BA%E8%A1%8C\"><span class=\"toc-text\">3.6.4 空行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">四、if语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">4.1 条件测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-1-1-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%8D%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">4.1.1 检查是否不相等</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-2-%E6%AF%94%E8%BE%83%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">4.1.2 比较数字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-2-%E6%A3%80%E6%9F%A5%E5%A4%9A%E4%B8%AA%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">4.1.2 检查多个条件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-3-%E6%A3%80%E6%9F%A5%E7%89%B9%E5%AE%9A%E5%80%BC%E6%98%AF%E5%90%A6%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%AD\"><span class=\"toc-text\">4.1.3 检查特定值是否在列表中</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-4-%E6%A3%80%E6%9F%A5%E7%89%B9%E5%AE%9A%E5%80%BC%E6%98%AF%E5%90%A6%E4%B8%8D%E5%8C%85%E5%90%AB%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%AD\"><span class=\"toc-text\">4.1.4 检查特定值是否不包含在列表中</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-5-%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">4.1.5 布尔表达式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.2 if语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-if-else-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.2.1 if else 语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-if-elif-else-%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">4.2.2 if elif else 语句</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">五、字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E4%BD%BF%E7%94%A8%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">5.1 使用字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-1-%E8%AE%BF%E9%97%AE%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.1.1 访问字典中的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-2-%E6%B7%BB%E5%8A%A0%E9%94%AE%E5%80%BC%E5%AF%B9\"><span class=\"toc-text\">5.1.2 添加键值对</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-3-%E4%BF%AE%E6%94%B9%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">5.1.3 修改字典中的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-4-%E5%88%A0%E9%99%A4%E9%94%AE%E5%80%BC%E5%AF%B9\"><span class=\"toc-text\">5.1.4 删除键值对</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">5.2 遍历字典</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E9%94%AE%E5%80%BC%E5%AF%B9\"><span class=\"toc-text\">5.2.1 遍历字典中的所有键值对</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E9%94%AE\"><span class=\"toc-text\">5.2.2 遍历字典中的所有键</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-3-%E6%8C%89%E9%A1%BA%E5%BA%8F%E9%81%8D%E5%8E%86%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E9%94%AE\"><span class=\"toc-text\">5.2.3 按顺序遍历字典中的所有键</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-4-%E9%81%8D%E5%8E%86%E5%88%97%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E5%80%BC\"><span class=\"toc-text\">5.2.4 遍历列表中所有值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">5.3 嵌套</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-1-%E5%AD%97%E5%85%B8%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">5.3.1 字典列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-2-%E5%9C%A8%E5%AD%97%E5%85%B8%E4%B8%AD%E5%82%A8%E5%AD%98%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">5.3.2 在字典中储存列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-3-3-%E5%9C%A8%E5%AD%97%E5%85%B8%E4%B8%AD%E5%82%A8%E5%AD%98%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">5.3.3 在字典中储存字典</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD%E3%80%81%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">六、用户输入和while循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-%E5%87%BD%E6%95%B0input\"><span class=\"toc-text\">6.1 函数input()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-1-%E4%BD%BF%E7%94%A8int-%E8%8E%B7%E5%8F%96%E8%BE%93%E5%85%A5%E7%9A%84%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">6.1.1 使用int()获取输入的数字</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-2-%E6%B1%82%E6%A8%A1%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">6.1.2 求模运算符%</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">6.2 while循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-1-%E8%AE%A9%E7%94%A8%E6%88%B7%E9%80%89%E6%8B%A9%E4%BD%95%E6%97%B6%E9%80%80%E5%87%BA\"><span class=\"toc-text\">6.2.1 让用户选择何时退出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-2-%E4%BD%BF%E7%94%A8%E6%A0%87%E5%BF%97\"><span class=\"toc-text\">6.2.2 使用标志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-3-%E4%BD%BF%E7%94%A8break%E9%80%80%E5%87%BA%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">6.2.3 使用break退出循环</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-2-4-%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E4%BD%BF%E7%94%A8continue\"><span class=\"toc-text\">6.2.4 在循环中使用continue</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83%E3%80%81%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">七、函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">7.1 定义函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-1-%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">7.1.1 向函数传递信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-1-2-%E5%AE%9E%E5%8F%82%E5%92%8C%E5%BD%A2%E5%8F%82\"><span class=\"toc-text\">7.1.2 实参和形参</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E4%BC%A0%E9%80%92%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">7.2 传递实参</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-1-%E4%BD%8D%E7%BD%AE%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">7.2.1 位置实参</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-2-%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">7.2.2 关键字实参</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-2-3-%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">7.2.3 默认值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">7.3 返回值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-1-%E8%BF%94%E5%9B%9E%E7%AE%80%E5%8D%95%E5%80%BC\"><span class=\"toc-text\">7.3.1 返回简单值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-2-%E8%AE%A9%E5%AE%9E%E5%8F%82%E5%8F%98%E4%B8%BA%E5%8F%AF%E9%80%89%E7%9A%84%E7%9A%84\"><span class=\"toc-text\">7.3.2 让实参变为可选的的</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-3-%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8\"><span class=\"toc-text\">7.3.3 返回一个字典</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-4-%E4%BC%A0%E9%80%92%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">7.4 传递列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-5-%E4%BC%A0%E9%80%92%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%BD%A2%E5%8F%82\"><span class=\"toc-text\">7.5 传递任意数量的形参</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-1-%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8%E4%BD%8D%E7%BD%AE%E5%AE%9E%E5%8F%82%E5%92%8C%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">7.5.1 结合使用位置实参和任意数量的实参</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-5-2-%E4%BD%BF%E7%94%A8%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E5%AE%9E%E5%8F%82\"><span class=\"toc-text\">7.5.2 使用任意数量的关键字实参</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-6-%E5%B0%86%E5%87%BD%E6%95%B0%E5%AD%98%E5%82%A8%E5%9C%A8%E6%A8%A1%E5%9D%97%E4%B8%AD\"><span class=\"toc-text\">7.6 将函数存储在模块中</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-6-1-%E5%AF%BC%E5%85%A5%E6%95%B4%E4%B8%AA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">7.6.1 导入整个模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-6-2-%E5%AF%BC%E5%85%A5%E7%89%B9%E5%AE%9A%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">7.6.2 导入特定的函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-6-3-%E4%BD%BF%E7%94%A8as%E7%BB%99%E5%87%BD%E6%95%B0%E3%80%81%E6%A8%A1%E5%9D%97%E6%8C%87%E5%AE%9A%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">7.6.3 使用as给函数、模块指定别名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-6-4-%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">7.6.4 导入模块中所有函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-7-%E5%87%BD%E6%95%B0%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">7.7 函数编写指南</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-8-%E6%89%93%E5%8C%85%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">7.8 打包程序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AB%E3%80%81%E7%B1%BB\"><span class=\"toc-text\">八、类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-1-%E5%88%9B%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E7%B1%BB\"><span class=\"toc-text\">8.1 创建和使用类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-1-%E5%88%9B%E5%BB%BADog%E7%B1%BB\"><span class=\"toc-text\">8.1.1 创建Dog类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-1-2-%E6%A0%B9%E6%8D%AE%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">8.1.2 根据类创建实例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-2-%E4%BD%BF%E7%94%A8%E7%B1%BB%E5%92%8C%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">8.2 使用类和实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-1-Car%E7%B1%BB\"><span class=\"toc-text\">8.2.1 Car类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-2-%E7%BB%99%E5%B1%9E%E6%80%A7%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">8.2.2 给属性指定默认值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-2-3-%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">8.2.3 修改属性的值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-3-%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">8.3 继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-1-%E5%AD%90%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-init\"><span class=\"toc-text\">8.3.1 子类的方法__init__()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-2-%E7%BB%99%E5%AD%90%E7%B1%BB%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">8.3.2 给子类定义属性和方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-4-%E9%87%8D%E5%86%99%E7%88%B6%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">8.3.4 重写父类的方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-3-4-%E5%B0%86%E5%AE%9E%E4%BE%8B%E7%94%A8%E4%BD%9C%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">8.3.4 将实例用作属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-4-%E5%AF%BC%E5%85%A5%E7%B1%BB\"><span class=\"toc-text\">8.4 导入类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-1-%E5%AF%BC%E5%85%A5%E5%8D%95%E4%B8%AA%E7%B1%BB\"><span class=\"toc-text\">8.4.1 导入单个类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-2-%E5%AF%BC%E5%85%A5%E5%A4%9A%E4%B8%AA%E7%B1%BB\"><span class=\"toc-text\">8.4.2 导入多个类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-3-%E5%AF%BC%E5%85%A5%E6%95%B4%E4%B8%AA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">8.4.3 导入整个模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-4-4-%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%E4%B8%AD%E6%89%80%E6%9C%89%E7%B1%BB\"><span class=\"toc-text\">8.4.4 导入模块中所有类</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E3%80%81%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">九、文件和异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-1-%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">9.1 文件基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-1-1-%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">9.1.1 文件打开模式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-2%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">9.2遍历文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-1-%E5%B0%86%E9%81%8D%E5%8E%86%E5%86%85%E5%AE%B9%E5%AD%98%E5%85%A5%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">9.2.1 将遍历内容存入列表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-2-3-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">9.2.3 二进制操作文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-3-%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">9.3 其他功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-4-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">9.4 异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#9-4-1-try-expect%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">9.4.1 try-expect代码块</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-5-%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">9.5 存储数据</span></a></li></ol></li></ol></li></ol>","author":{"name":"XXXWANG","slug":"blog-author","avatar":"https://zuimiao.xyz/images/touxiang.png","link":"/","description":"为什么不去码头整点薯条呢","socials":{"github":"https://github.com/zuimiao33","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://zuimiao.xyz/images/icon_bilibili.png","link":"https://space.bilibili.com/12238082?spm_id_from=333.1007.0.0"}}}},"mapped":true,"prev_post":{"title":"数据结构（C)--线性表","uid":"1c864ee8c45d128c1db0522699c2fec9","slug":"数据结构（C)----线性表的顺序表示","date":"2022-11-09T03:55:20.000Z","updated":"2022-11-09T06:21:12.111Z","comments":true,"path":"api/articles/数据结构（C)----线性表的顺序表示.json","keywords":null,"cover":"https://zuimiao.xyz/images/cover2.jpg","text":"线性表 线性表的定义线性表（List）：零个或多个数据元素的有限序列。 线性表的数据集合为{a1,a2,…,an}，假设每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"C/C++","slug":"C-C","count":1,"path":"api/categories/C-C.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/tags/数据结构.json"}],"author":{"name":"XXXWANG","slug":"blog-author","avatar":"https://zuimiao.xyz/images/touxiang.png","link":"/","description":"为什么不去码头整点薯条呢","socials":{"github":"https://github.com/zuimiao33","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"https://zuimiao.xyz/images/icon_bilibili.png","link":"https://space.bilibili.com/12238082?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{}}